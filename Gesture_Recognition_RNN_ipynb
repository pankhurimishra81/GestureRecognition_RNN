{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WzxwRQw_QEIe"
   },
   "source": [
    "# **Gesture Recognition**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In this group project, you are going to build a 3D Conv model that will be able to predict the 5 gestures correctly. Please import the following libraries to get started."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import necessary packages . We may need to import the packages as we move along to fix the errors \n",
    "packages installed - scipy , keras , tensorflow-gpu\n",
    "\n",
    "#pip install scipy==1.2.1\n",
    "#pip install keras \n",
    "#pip install --upgrade pip\n",
    "#pip install --upgrade tensorflow-gpu\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "n_NqcyRoQSlB"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import os\n",
    "from imageio import imread\n",
    "#from imresize import imread\n",
    "#from scipy.misc import imread, imresize\n",
    "from skimage.transform import resize\n",
    "import datetime\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cUeLSfJtRMWO"
   },
   "source": [
    "## We set the random seed so that the results don't vary drastically."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "6UGmAJI5Qo-2"
   },
   "outputs": [],
   "source": [
    "np.random.seed(30)\n",
    "import random as rn\n",
    "rn.seed(30)\n",
    "import tensorflow as tf\n",
    "tf.random.set_seed(30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1ZRp848QRyQF"
   },
   "source": [
    "## In this block, you read the folder names for training and validation. You also set the batch_size here. Note that you set the batch size in such a way that you are able to use the GPU in full capacity. You keep increasing the batch size until the machine throws an error."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Keeping the relevant code (commented for Google Colab) and uncommented for Jarvis\n",
    "- Read the Training and Validation data\n",
    "- Defining the batch size "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YL5wh9S1R2ge",
    "outputId": "db25f0bd-dd6b-4a18-a984-9ac8c04f8a49"
   },
   "outputs": [],
   "source": [
    "#from google.colab import drive\n",
    "#drive.mount('/content/gdrive')\n",
    "\n",
    "#google_drive_shared_path = os.path.join('/content/gdrive', 'MyDrive', 'Project_data')\n",
    "#print(google_drive_shared_path)\n",
    "\n",
    "#train_doc = np.random.permutation(open('/content/gdrive/MyDrive/Project_data/Project_data/train.csv').readlines())\n",
    "#val_doc = np.random.permutation(open('/content/gdrive/MyDrive/Project_data/Project_data/val.csv').readlines())\n",
    "\n",
    "train_doc = np.random.permutation(open('/home/datasets/Project_data/train.csv').readlines())\n",
    "val_doc = np.random.permutation(open('/home/datasets/Project_data/val.csv').readlines())\n",
    "batch_size = 64"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DA3pRkW1YtaW",
    "outputId": "dc1e5d3d-119c-47cf-ea39-48bcba8dd15b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tue Nov 30 15:55:40 2021       \n",
      "+-----------------------------------------------------------------------------+\n",
      "| NVIDIA-SMI 470.42.01    Driver Version: 470.42.01    CUDA Version: 11.4     |\n",
      "|-------------------------------+----------------------+----------------------+\n",
      "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
      "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
      "|                               |                      |               MIG M. |\n",
      "|===============================+======================+======================|\n",
      "|   0  Quadro RTX 5000     Off  | 00000000:1D:00.0 Off |                  Off |\n",
      "| 33%   36C    P8    13W / 230W |      0MiB / 16125MiB |      0%      Default |\n",
      "|                               |                      |                  N/A |\n",
      "+-------------------------------+----------------------+----------------------+\n",
      "                                                                               \n",
      "+-----------------------------------------------------------------------------+\n",
      "| Processes:                                                                  |\n",
      "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
      "|        ID   ID                                                   Usage      |\n",
      "|=============================================================================|\n",
      "|  No running processes found                                                 |\n",
      "+-----------------------------------------------------------------------------+\n"
     ]
    }
   ],
   "source": [
    "## Checking the GPU configuration\n",
    "!nvidia-smi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KfnVA6SlY3I-"
   },
   "source": [
    "## Generator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This is one of the most important part of the code. The overall structure of the generator has been given. In the generator, you are going to preprocess the images as you have images of 2 different dimensions as well as create a batch of video frames. You have to experiment with img_idx, y,z and normalization such that you get high accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define few functions which we need later \n",
    "- Crop the image \n",
    "- Normalize the image\n",
    "- Pre-process \n",
    "- Create 2D/ 3D Filters \n",
    "- Get the Batch Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "19wOxEPYZJje"
   },
   "outputs": [],
   "source": [
    "def cropResize(image, y, z):\n",
    "    h, w = image.shape\n",
    "    \n",
    "    # if smaller image crop at center for 120x120\n",
    "    if w == 160:\n",
    "        image = image[:120, 20:140]\n",
    "\n",
    "    # resize every image\n",
    "    return resize(image, (y,z))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "0OK_7pXGZMqH"
   },
   "outputs": [],
   "source": [
    "def normalizeImage(image):\n",
    "    # applying normalization\n",
    "    return image/255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "qItghhADZPlf"
   },
   "outputs": [],
   "source": [
    "def preprocessImage(image, y, z):\n",
    "    return normalizeImage(cropResize(image, y, z))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "XV_rL31YZSLG"
   },
   "outputs": [],
   "source": [
    "def make3dFilter(x):\n",
    "    return tuple([x]*3)\n",
    "\n",
    "def make2dFilter(x):\n",
    "    return tuple([x]*2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "iM4vvpcvZS9v"
   },
   "outputs": [],
   "source": [
    "def getBatchData(source_path, t, batch, batch_size, img_tensor):\n",
    "    [x,y,z] = [len(img_tensor[0]),img_tensor[1], img_tensor[2]]\n",
    "    img_idx = img_tensor[0]\n",
    "    batch_data = np.zeros((batch_size,x,y,z,3)) # x is the number of images you use for each video, (y,z) is the final size of the input images and 3 is the number of channels RGB\n",
    "    batch_labels = np.zeros((batch_size,5)) # batch_labels is the one hot representation of the output\n",
    "    for folder in range(batch_size): # iterate over the batch_size\n",
    "        imgs = os.listdir(source_path+'/'+ t[folder + (batch*batch_size)].split(';')[0]) # read all the images in the folder\n",
    "        for idx,item in enumerate(img_idx): #  Iterate iver the frames/images of a folder to read them in\n",
    "            image = imread(source_path+'/'+ t[folder + (batch*batch_size)].strip().split(';')[0]+'/'+imgs[item]).astype(np.float32)\n",
    "\n",
    "            #crop the images and resize them. Note that the images are of 2 different shape \n",
    "            #and the conv3D will throw error if the inputs in a batch have different shapes\n",
    "\n",
    "            # separate preprocessImage function is defined for cropping, resizing and normalizing images\n",
    "            batch_data[folder,idx,:,:,0] = preprocessImage(image[:, :, 0], y, z)\n",
    "            batch_data[folder,idx,:,:,1] = preprocessImage(image[:, :, 1], y, z)\n",
    "            batch_data[folder,idx,:,:,2] = preprocessImage(image[:, :, 2], y, z)\n",
    "\n",
    "        batch_labels[folder, int(t[folder + (batch*batch_size)].strip().split(';')[2])] = 1\n",
    "    return batch_data, batch_labels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define Generator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "rpa-QgsuZXSG"
   },
   "outputs": [],
   "source": [
    "def generator(source_path, folder_list, batch_size, img_tensor):\n",
    "    print( 'Source path = ', source_path, '; batch size =', batch_size)\n",
    "    while True:\n",
    "        t = np.random.permutation(folder_list)\n",
    "        num_batches = int(len(folder_list)/batch_size)\n",
    "        for batch in range(num_batches): # we iterate over the number of batches\n",
    "            yield getBatchData(source_path, t, batch, batch_size, img_tensor)\n",
    "        \n",
    "        # write the code for the remaining data points which are left after full batches\n",
    "        # checking if any remaining batches are there or not\n",
    "        if len(folder_list)%batch_size != 0:\n",
    "            # updated the batch size and yield\n",
    "            batch_size = len(folder_list)%batch_size\n",
    "            yield getBatchData(source_path, t, batch, batch_size, img_tensor)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ba4CGlSzZt7e"
   },
   "source": [
    "## Note here that a video is represented above in the generator as (number of images, height, width, number of channels). Take this into consideration while creating the model architecture."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "KYHP4pfyZ1h2",
    "outputId": "2c986822-c1e7-492d-eaec-35a42e079d18"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# training sequences = 663\n",
      "# validation sequences = 100\n",
      "# epochs = 10\n"
     ]
    }
   ],
   "source": [
    "curr_dt_time = datetime.datetime.now()\n",
    "#train_path = '/content/gdrive/MyDrive/Project_data/Project_data/train'\n",
    "#val_path = '/content/gdrive/MyDrive/Project_data/Project_data/val'\n",
    "train_path = '/home/datasets/Project_data/train'\n",
    "val_path = '/home/datasets/Project_data/val'\n",
    "num_train_sequences = len(train_doc)\n",
    "print('# training sequences =', num_train_sequences)\n",
    "num_val_sequences = len(val_doc)\n",
    "print('# validation sequences =', num_val_sequences)\n",
    "num_epochs = 10\n",
    "print ('# epochs =', num_epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "SqvFAQKPaHQv",
    "outputId": "896701a9-1de1-41d1-ff9c-6e193fa777e2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# img_tensor = [array([ 0,  2,  3,  5,  6,  8,  9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24,\n",
      "       26, 27, 29]), 100, 100, 3]\n"
     ]
    }
   ],
   "source": [
    "def getImgTensor(n_frames):\n",
    "    img_idx = np.round(np.linspace(0, 29, n_frames)).astype(int)\n",
    "    return [img_idx, 100, 100, 3]\n",
    "\n",
    "# define image tensor size\n",
    "img_tensor = getImgTensor(20)\n",
    "print ('# img_tensor =', img_tensor)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rix1sHCKaLzG"
   },
   "source": [
    "## Generator Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "-s_-xNT1aO6P",
    "outputId": "1cc6c2aa-c9c8-4046-abb4-553248f5b59d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Source path =  /home/datasets/Project_data/train ; batch size = 64\n",
      "(64, 20, 100, 100, 3)\n",
      "Source path =  /home/datasets/Project_data/val ; batch size = 64\n",
      "(64, 20, 100, 100, 3)\n"
     ]
    }
   ],
   "source": [
    "# check complete batch shape\n",
    "sample_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "sample_batch_data, sample_batch_labels = next(sample_generator)\n",
    "print(sample_batch_data.shape)\n",
    "\n",
    "# validation batch sample\n",
    "sample_val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n",
    "sample_val_batch_data, sample_val_batch_labels = next(sample_val_generator)\n",
    "print(sample_val_batch_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 203
    },
    "id": "ltBYnDJJgnKt",
    "outputId": "5b06332a-e887-4b76-b9ad-7a26b7851d3a"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot generated sample images\n",
    "fig, ax = plt.subplots(1,2)\n",
    "ax[0].imshow(sample_val_batch_data[16,10,:,:,:])   \n",
    "ax[1].imshow(sample_val_batch_data[25,10,:,:,:])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define function to evaluate the model from model history "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "QCelYG9bgrw_"
   },
   "outputs": [],
   "source": [
    "def plotModelHistory(h):\n",
    "    fig, ax = plt.subplots(1, 2, figsize=(15,4))\n",
    "    ax[0].plot(h.history['loss'])   \n",
    "    ax[0].plot(h.history['val_loss'])\n",
    "    ax[0].legend(['loss','val_loss'])\n",
    "    ax[0].title.set_text(\"Train loss vs Validation loss\")\n",
    "\n",
    "    ax[1].plot(h.history['categorical_accuracy'])   \n",
    "    ax[1].plot(h.history['val_categorical_accuracy'])\n",
    "    ax[1].legend(['categorical_accuracy','val_categorical_accuracy'])\n",
    "    ax[1].title.set_text(\"Train accuracy vs Validation accuracy\")\n",
    "    plt.show()\n",
    "\n",
    "    print(\"Max. Training Accuracy\", max(h.history['categorical_accuracy']))\n",
    "    print(\"Max. Validaiton Accuracy\", max(h.history['val_categorical_accuracy']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "L6S22Mbbgw2B"
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Here you make the model using different functionalities that Keras provides.Remember to use Conv3D and MaxPooling3D and not Conv2D and Maxpooling2D for a 3D convolution model. You would want to use TimeDistributed while building a Conv2D + RNN model. Also remember that the last layer is the softmax. Design the network in such a way that the model is able to give good accuracy on the least number of parameters so that it can fit in the memory of the webcam."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import additional libraries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "QPA5u-DPg9MY"
   },
   "outputs": [],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras.models import Sequential, Model\n",
    "from tensorflow.keras.layers import Dense, GRU, Flatten, TimeDistributed, Flatten, BatchNormalization, Activation, Dropout, LSTM\n",
    "\n",
    "from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\n",
    "from tensorflow.keras import optimizers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Conv3D, MaxPooling3D, Conv2D, MaxPooling2D"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "I4uVpOpUhFao"
   },
   "source": [
    "## Base Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "KgC1YT9khJh4",
    "outputId": "efe3bbd5-2cb4-4139-d519-07c4763b8c55"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv3d (Conv3D)              (None, 16, 96, 96, 16)    6016      \n",
      "_________________________________________________________________\n",
      "max_pooling3d (MaxPooling3D) (None, 8, 48, 48, 16)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization (BatchNo (None, 8, 48, 48, 16)     64        \n",
      "_________________________________________________________________\n",
      "conv3d_1 (Conv3D)            (None, 6, 46, 46, 32)     13856     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_1 (MaxPooling3 (None, 6, 23, 23, 32)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_1 (Batch (None, 6, 23, 23, 32)     128       \n",
      "_________________________________________________________________\n",
      "conv3d_2 (Conv3D)            (None, 4, 21, 21, 64)     55360     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_2 (MaxPooling3 (None, 4, 11, 11, 64)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_2 (Batch (None, 4, 11, 11, 64)     256       \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 30976)             0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 128)               3965056   \n",
      "_________________________________________________________________\n",
      "batch_normalization_3 (Batch (None, 128)               512       \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 64)                8256      \n",
      "_________________________________________________________________\n",
      "batch_normalization_4 (Batch (None, 64)                256       \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 5)                 325       \n",
      "=================================================================\n",
      "Total params: 4,050,085\n",
      "Trainable params: 4,049,477\n",
      "Non-trainable params: 608\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#write your model here\n",
    "\n",
    "def defineModel(img_tensor):\n",
    "    inputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n",
    "\n",
    "    model = Sequential([\n",
    "        Conv3D(16, make3dFilter(5), activation='relu', input_shape=inputShape),\n",
    "        MaxPooling3D(make3dFilter(2), padding='same'),\n",
    "        BatchNormalization(),\n",
    "\n",
    "        Conv3D(32, make3dFilter(3), activation='relu'),\n",
    "        MaxPooling3D(pool_size=(1,2,2), padding='same'),\n",
    "        BatchNormalization(),\n",
    "\n",
    "        Conv3D(64, make3dFilter(3), activation='relu'),\n",
    "        MaxPooling3D(pool_size=(1,2,2), padding='same'),\n",
    "        BatchNormalization(),\n",
    "\n",
    "        Flatten(),\n",
    "        Dense(128, activation='relu'),\n",
    "        BatchNormalization(),\n",
    "        Dropout(0.25),\n",
    "\n",
    "        Dense(64, activation='relu'),\n",
    "        BatchNormalization(),\n",
    "        Dropout(0.25),\n",
    "\n",
    "        Dense(5, activation='softmax')\n",
    "    ])\n",
    "\n",
    "#Now that you have written the model, the next step is to compile the model. When you print the summary of the model, you'll see the total number of parameters you have to train.\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
    "    return model\n",
    "\n",
    "model = defineModel(img_tensor)\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vMp57RGlh72c"
   },
   "source": [
    "## Let us create the train_generator and the val_generator which will be used in .fit_generator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "id": "VdhcxPFqiCMn"
   },
   "outputs": [],
   "source": [
    "train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "val_generator = generator(val_path, val_doc, batch_size, img_tensor)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nBkXzEsKiIcR"
   },
   "source": [
    "## The steps_per_epoch and validation_steps are used by fit_generator to decide the number of next() calls it needs to make."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "id": "5ZC_NzmDiKUI"
   },
   "outputs": [],
   "source": [
    "if (num_train_sequences%batch_size) == 0:\n",
    "    steps_per_epoch = int(num_train_sequences/batch_size)\n",
    "else:\n",
    "    steps_per_epoch = (num_train_sequences//batch_size) + 1\n",
    "\n",
    "if (num_val_sequences%batch_size) == 0:\n",
    "    validation_steps = int(num_val_sequences/batch_size)\n",
    "else:\n",
    "    validation_steps = (num_val_sequences//batch_size) + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "J0QDUUq8iTso"
   },
   "source": [
    "## Model Callbacks / Checkpoint Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "MGMqXvNkiVqH",
    "outputId": "2fc5fc97-e37d-4360-8ba4-720caddf2e3c"
   },
   "outputs": [],
   "source": [
    "model_name = 'model_init' + '_' + str(curr_dt_time).replace(' ','').replace(':','_') + '/'\n",
    "    \n",
    "if not os.path.exists(model_name):\n",
    "    os.mkdir(model_name)\n",
    "\n",
    "filepath = model_name + 'model-{epoch:05d}-{loss:.5f}-{categorical_accuracy:.5f}-{val_loss:.5f}-{val_categorical_accuracy:.5f}.h5'\n",
    "#filepath = os.path.join(google_drive_shared_path, model_name ,'model-{epoch:05d}-{loss:.5f}-{categorical_accuracy:.5f}-{val_loss:.5f}-{val_categorical_accuracy:.5f}.h5')\n",
    "#print(filepath)\n",
    "checkpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=False, save_weights_only=False, mode='auto', save_freq = 'epoch')\n",
    "\n",
    "LR = ReduceLROnPlateau(monitor='val_loss', factor=0.2, verbose=1, patience=4)\n",
    "\n",
    "callbacks_list = [checkpoint, LR]\n",
    "#callbacks_list = [LR]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ME7_UySZis6o"
   },
   "source": [
    "## Test Batch Size & Frames"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let us now fit the model. This will start training the model and with the help of the checkpoints, you'll be able to save the model at the end of each epoch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "id": "wQznJE1EizNf"
   },
   "outputs": [],
   "source": [
    "def testBatchSize(batch_size, n_frames):\n",
    "    img_tensor = getImgTensor(n_frames)\n",
    "    print(\"Using frames as\", img_tensor[0])\n",
    "    global callbacks_list\n",
    "    num_epochs = 3\n",
    "    train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "    val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n",
    "    if (num_train_sequences%batch_size) == 0:\n",
    "        steps_per_epoch = int(num_train_sequences/batch_size)\n",
    "    else:\n",
    "        steps_per_epoch = (num_train_sequences//batch_size) + 1\n",
    "\n",
    "    if (num_val_sequences%batch_size) == 0:\n",
    "        validation_steps = int(num_val_sequences/batch_size)\n",
    "    else:\n",
    "        validation_steps = (num_val_sequences//batch_size) + 1\n",
    "\n",
    "    model = defineModel(img_tensor)\n",
    "    model.fit(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n",
    "                callbacks=callbacks_list, validation_data=val_generator, \n",
    "                validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Rryk0QDoi3aX"
   },
   "source": [
    "### testBatchSize(batch_size=64, n_frames=30)\n",
    "### testBatchSize(batch_size=64, n_frames=16)\n",
    "### testBatchSize(batch_size=32, n_frames=30)\n",
    "### testBatchSize(batch_size=32, n_frames=16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "P2k89mEtjGhA"
   },
   "source": [
    "## With above observations, we can see that batch size is not impacting training time but number of frames. We will use batch size of 64 as it seems optimal. It is commented as it takes a lot of time to run that is restricting for the notebook to completely run."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LE_HJKFwjQXu"
   },
   "source": [
    "## Model 1 - Frames-16, Epochs-20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "pHdZ2h1CjWsv",
    "outputId": "09e5fd60-408b-4e9b-f4fa-7889d6c62a42"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"conv_3d1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv3d_3 (Conv3D)            (None, 12, 96, 96, 16)    6016      \n",
      "_________________________________________________________________\n",
      "max_pooling3d_3 (MaxPooling3 (None, 6, 48, 48, 16)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_5 (Batch (None, 6, 48, 48, 16)     64        \n",
      "_________________________________________________________________\n",
      "conv3d_4 (Conv3D)            (None, 4, 46, 46, 32)     13856     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_4 (MaxPooling3 (None, 4, 23, 23, 32)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_6 (Batch (None, 4, 23, 23, 32)     128       \n",
      "_________________________________________________________________\n",
      "conv3d_5 (Conv3D)            (None, 2, 21, 21, 64)     55360     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_5 (MaxPooling3 (None, 2, 11, 11, 64)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_7 (Batch (None, 2, 11, 11, 64)     256       \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 15488)             0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 128)               1982592   \n",
      "_________________________________________________________________\n",
      "batch_normalization_8 (Batch (None, 128)               512       \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 64)                8256      \n",
      "_________________________________________________________________\n",
      "batch_normalization_9 (Batch (None, 64)                256       \n",
      "_________________________________________________________________\n",
      "dropout_3 (Dropout)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_5 (Dense)              (None, 5)                 325       \n",
      "=================================================================\n",
      "Total params: 2,067,621\n",
      "Trainable params: 2,067,013\n",
      "Non-trainable params: 608\n",
      "_________________________________________________________________\n",
      "None\n",
      "Source path =  /home/datasets/Project_data/train ; batch size = 64\n",
      "Epoch 1/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 1.4363 - categorical_accuracy: 0.4842Source path =  /home/datasets/Project_data/val ; batch size = 64\n",
      "\n",
      "Epoch 00001: saving model to model_init_2021-11-3015_56_01.229903/model-00001-1.43628-0.48416-6.82459-0.24000.h5\n",
      "11/11 [==============================] - 85s 8s/step - loss: 1.4363 - categorical_accuracy: 0.4842 - val_loss: 6.8246 - val_categorical_accuracy: 0.2400\n",
      "Epoch 2/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.8032 - categorical_accuracy: 0.6996\n",
      "Epoch 00002: saving model to model_init_2021-11-3015_56_01.229903/model-00002-0.80324-0.69960-6.52328-0.23438.h5\n",
      "11/11 [==============================] - 38s 3s/step - loss: 0.8032 - categorical_accuracy: 0.6996 - val_loss: 6.5233 - val_categorical_accuracy: 0.2344\n",
      "Epoch 3/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.9446 - categorical_accuracy: 0.6522\n",
      "Epoch 00003: saving model to model_init_2021-11-3015_56_01.229903/model-00003-0.94464-0.65217-5.44930-0.21429.h5\n",
      "11/11 [==============================] - 38s 3s/step - loss: 0.9446 - categorical_accuracy: 0.6522 - val_loss: 5.4493 - val_categorical_accuracy: 0.2143\n",
      "Epoch 4/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7468 - categorical_accuracy: 0.7468\n",
      "Epoch 00004: saving model to model_init_2021-11-3015_56_01.229903/model-00004-0.74684-0.74678-4.30294-0.21875.h5\n",
      "11/11 [==============================] - 33s 3s/step - loss: 0.7468 - categorical_accuracy: 0.7468 - val_loss: 4.3029 - val_categorical_accuracy: 0.2188\n",
      "Epoch 5/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7875 - categorical_accuracy: 0.6890\n",
      "Epoch 00005: saving model to model_init_2021-11-3015_56_01.229903/model-00005-0.78753-0.68900-3.01601-0.18750.h5\n",
      "11/11 [==============================] - 28s 3s/step - loss: 0.7875 - categorical_accuracy: 0.6890 - val_loss: 3.0160 - val_categorical_accuracy: 0.1875\n",
      "Epoch 6/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7489 - categorical_accuracy: 0.7177\n",
      "Epoch 00006: saving model to model_init_2021-11-3015_56_01.229903/model-00006-0.74892-0.71770-3.06866-0.25000.h5\n",
      "11/11 [==============================] - 24s 2s/step - loss: 0.7489 - categorical_accuracy: 0.7177 - val_loss: 3.0687 - val_categorical_accuracy: 0.2500\n",
      "Epoch 7/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7302 - categorical_accuracy: 0.7340\n",
      "Epoch 00007: saving model to model_init_2021-11-3015_56_01.229903/model-00007-0.73016-0.73399-1.84506-0.25000.h5\n",
      "11/11 [==============================] - 25s 2s/step - loss: 0.7302 - categorical_accuracy: 0.7340 - val_loss: 1.8451 - val_categorical_accuracy: 0.2500\n",
      "Epoch 8/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5510 - categorical_accuracy: 0.8075\n",
      "Epoch 00008: saving model to model_init_2021-11-3015_56_01.229903/model-00008-0.55103-0.80749-1.10981-0.50000.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.5510 - categorical_accuracy: 0.8075 - val_loss: 1.1098 - val_categorical_accuracy: 0.5000\n",
      "Epoch 9/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6758 - categorical_accuracy: 0.7701\n",
      "Epoch 00009: saving model to model_init_2021-11-3015_56_01.229903/model-00009-0.67577-0.77005-2.29357-0.25000.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.6758 - categorical_accuracy: 0.7701 - val_loss: 2.2936 - val_categorical_accuracy: 0.2500\n",
      "Epoch 10/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6331 - categorical_accuracy: 0.7487\n",
      "Epoch 00010: saving model to model_init_2021-11-3015_56_01.229903/model-00010-0.63307-0.74866-2.69848-0.12500.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.6331 - categorical_accuracy: 0.7487 - val_loss: 2.6985 - val_categorical_accuracy: 0.1250\n",
      "Epoch 11/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6091 - categorical_accuracy: 0.7540\n",
      "Epoch 00011: saving model to model_init_2021-11-3015_56_01.229903/model-00011-0.60906-0.75401-1.32303-0.37500.h5\n",
      "11/11 [==============================] - 20s 2s/step - loss: 0.6091 - categorical_accuracy: 0.7540 - val_loss: 1.3230 - val_categorical_accuracy: 0.3750\n",
      "Epoch 12/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5738 - categorical_accuracy: 0.7861\n",
      "Epoch 00012: saving model to model_init_2021-11-3015_56_01.229903/model-00012-0.57380-0.78610-1.81028-0.25000.h5\n",
      "\n",
      "Epoch 00012: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.5738 - categorical_accuracy: 0.7861 - val_loss: 1.8103 - val_categorical_accuracy: 0.2500\n",
      "Epoch 13/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5353 - categorical_accuracy: 0.8128\n",
      "Epoch 00013: saving model to model_init_2021-11-3015_56_01.229903/model-00013-0.53528-0.81283-1.37845-0.50000.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.5353 - categorical_accuracy: 0.8128 - val_loss: 1.3784 - val_categorical_accuracy: 0.5000\n",
      "Epoch 14/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3662 - categorical_accuracy: 0.8770\n",
      "Epoch 00014: saving model to model_init_2021-11-3015_56_01.229903/model-00014-0.36623-0.87701-1.26213-0.37500.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.3662 - categorical_accuracy: 0.8770 - val_loss: 1.2621 - val_categorical_accuracy: 0.3750\n",
      "Epoch 15/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3239 - categorical_accuracy: 0.8770\n",
      "Epoch 00015: saving model to model_init_2021-11-3015_56_01.229903/model-00015-0.32394-0.87701-0.86810-0.50000.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.3239 - categorical_accuracy: 0.8770 - val_loss: 0.8681 - val_categorical_accuracy: 0.5000\n",
      "Epoch 16/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2845 - categorical_accuracy: 0.8984\n",
      "Epoch 00016: saving model to model_init_2021-11-3015_56_01.229903/model-00016-0.28447-0.89840-1.46710-0.50000.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.2845 - categorical_accuracy: 0.8984 - val_loss: 1.4671 - val_categorical_accuracy: 0.5000\n",
      "Epoch 17/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2908 - categorical_accuracy: 0.9305\n",
      "Epoch 00017: saving model to model_init_2021-11-3015_56_01.229903/model-00017-0.29080-0.93048-1.25933-0.50000.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.2908 - categorical_accuracy: 0.9305 - val_loss: 1.2593 - val_categorical_accuracy: 0.5000\n",
      "Epoch 18/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3414 - categorical_accuracy: 0.8503\n",
      "Epoch 00018: saving model to model_init_2021-11-3015_56_01.229903/model-00018-0.34135-0.85027-1.76198-0.12500.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.3414 - categorical_accuracy: 0.8503 - val_loss: 1.7620 - val_categorical_accuracy: 0.1250\n",
      "Epoch 19/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3178 - categorical_accuracy: 0.8877\n",
      "Epoch 00019: saving model to model_init_2021-11-3015_56_01.229903/model-00019-0.31784-0.88770-1.49694-0.50000.h5\n",
      "\n",
      "Epoch 00019: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.3178 - categorical_accuracy: 0.8877 - val_loss: 1.4969 - val_categorical_accuracy: 0.5000\n",
      "Epoch 20/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2560 - categorical_accuracy: 0.9251\n",
      "Epoch 00020: saving model to model_init_2021-11-3015_56_01.229903/model-00020-0.25597-0.92513-1.44172-0.37500.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.2560 - categorical_accuracy: 0.9251 - val_loss: 1.4417 - val_categorical_accuracy: 0.3750\n"
     ]
    }
   ],
   "source": [
    "n_frames = 16\n",
    "num_epochs = 20\n",
    "batch_size = 64\n",
    "\n",
    "img_tensor = getImgTensor(n_frames)\n",
    "train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n",
    "\n",
    "if (num_train_sequences%batch_size) == 0:\n",
    "    steps_per_epoch = int(num_train_sequences/batch_size)\n",
    "else:\n",
    "    steps_per_epoch = (num_train_sequences//batch_size) + 1\n",
    "\n",
    "if (num_val_sequences%batch_size) == 0:\n",
    "    validation_steps = int(num_val_sequences/batch_size)\n",
    "else:\n",
    "    validation_steps = (num_val_sequences//batch_size) + 1\n",
    "    \n",
    "inputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n",
    "\n",
    "model1 = Sequential([\n",
    "    Conv3D(16, make3dFilter(5), activation='relu', input_shape=inputShape),\n",
    "    MaxPooling3D(make3dFilter(2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Conv3D(32, make3dFilter(3), activation='relu'),\n",
    "    MaxPooling3D(pool_size=(1,2,2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Conv3D(64, make3dFilter(3), activation='relu'),\n",
    "    MaxPooling3D(pool_size=(1,2,2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Flatten(),\n",
    "    Dense(128, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.25),\n",
    "\n",
    "    Dense(64, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.25),\n",
    "\n",
    "    Dense(5, activation='softmax')\n",
    "], name=\"conv_3d1\")\n",
    "model1.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
    "print(model1.summary())\n",
    "\n",
    "model1_history = model1.fit(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n",
    "            callbacks=callbacks_list, validation_data=val_generator, \n",
    "            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max. Training Accuracy 0.9304812550544739\n",
      "Max. Validaiton Accuracy 0.5\n"
     ]
    }
   ],
   "source": [
    "plotModelHistory(model1_history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 2: Frames-30, Epochs-30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"conv_3d2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv3d_6 (Conv3D)            (None, 12, 96, 96, 16)    6016      \n",
      "_________________________________________________________________\n",
      "max_pooling3d_6 (MaxPooling3 (None, 6, 48, 48, 16)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_10 (Batc (None, 6, 48, 48, 16)     64        \n",
      "_________________________________________________________________\n",
      "conv3d_7 (Conv3D)            (None, 4, 46, 46, 32)     13856     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_7 (MaxPooling3 (None, 4, 23, 23, 32)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_11 (Batc (None, 4, 23, 23, 32)     128       \n",
      "_________________________________________________________________\n",
      "conv3d_8 (Conv3D)            (None, 2, 21, 21, 64)     55360     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_8 (MaxPooling3 (None, 2, 11, 11, 64)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_12 (Batc (None, 2, 11, 11, 64)     256       \n",
      "_________________________________________________________________\n",
      "flatten_2 (Flatten)          (None, 15488)             0         \n",
      "_________________________________________________________________\n",
      "dense_6 (Dense)              (None, 128)               1982592   \n",
      "_________________________________________________________________\n",
      "batch_normalization_13 (Batc (None, 128)               512       \n",
      "_________________________________________________________________\n",
      "dropout_4 (Dropout)          (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_7 (Dense)              (None, 64)                8256      \n",
      "_________________________________________________________________\n",
      "batch_normalization_14 (Batc (None, 64)                256       \n",
      "_________________________________________________________________\n",
      "dropout_5 (Dropout)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_8 (Dense)              (None, 5)                 325       \n",
      "=================================================================\n",
      "Total params: 2,067,621\n",
      "Trainable params: 2,067,013\n",
      "Non-trainable params: 608\n",
      "_________________________________________________________________\n",
      "None\n",
      "Source path =  /home/datasets/Project_data/train ; batch size = 64\n",
      "Epoch 1/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 1.4960 - categorical_accuracy: 0.4646Source path =  /home/datasets/Project_data/val ; batch size = 64\n",
      "\n",
      "Epoch 00001: saving model to model_init_2021-11-3015_56_01.229903/model-00001-1.49604-0.46456-6.36019-0.26000.h5\n",
      "11/11 [==============================] - 89s 8s/step - loss: 1.4960 - categorical_accuracy: 0.4646 - val_loss: 6.3602 - val_categorical_accuracy: 0.2600\n",
      "Epoch 2/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.8638 - categorical_accuracy: 0.6680\n",
      "Epoch 00002: saving model to model_init_2021-11-3015_56_01.229903/model-00002-0.86381-0.66798-4.98055-0.26562.h5\n",
      "11/11 [==============================] - 39s 4s/step - loss: 0.8638 - categorical_accuracy: 0.6680 - val_loss: 4.9806 - val_categorical_accuracy: 0.2656\n",
      "Epoch 3/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 1.0482 - categorical_accuracy: 0.5771\n",
      "Epoch 00003: saving model to model_init_2021-11-3015_56_01.229903/model-00003-1.04816-0.57708-2.87522-0.26786.h5\n",
      "11/11 [==============================] - 35s 3s/step - loss: 1.0482 - categorical_accuracy: 0.5771 - val_loss: 2.8752 - val_categorical_accuracy: 0.2679\n",
      "Epoch 4/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7532 - categorical_accuracy: 0.7511\n",
      "Epoch 00004: saving model to model_init_2021-11-3015_56_01.229903/model-00004-0.75324-0.75107-2.85318-0.28125.h5\n",
      "11/11 [==============================] - 31s 3s/step - loss: 0.7532 - categorical_accuracy: 0.7511 - val_loss: 2.8532 - val_categorical_accuracy: 0.2812\n",
      "Epoch 5/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.8115 - categorical_accuracy: 0.7129\n",
      "Epoch 00005: saving model to model_init_2021-11-3015_56_01.229903/model-00005-0.81155-0.71292-3.65937-0.21875.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.8115 - categorical_accuracy: 0.7129 - val_loss: 3.6594 - val_categorical_accuracy: 0.2188\n",
      "Epoch 6/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.8274 - categorical_accuracy: 0.6746\n",
      "Epoch 00006: saving model to model_init_2021-11-3015_56_01.229903/model-00006-0.82738-0.67464-2.60614-0.12500.h5\n",
      "11/11 [==============================] - 24s 2s/step - loss: 0.8274 - categorical_accuracy: 0.6746 - val_loss: 2.6061 - val_categorical_accuracy: 0.1250\n",
      "Epoch 7/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6865 - categorical_accuracy: 0.7635\n",
      "Epoch 00007: saving model to model_init_2021-11-3015_56_01.229903/model-00007-0.68651-0.76355-2.22682-0.25000.h5\n",
      "11/11 [==============================] - 24s 2s/step - loss: 0.6865 - categorical_accuracy: 0.7635 - val_loss: 2.2268 - val_categorical_accuracy: 0.2500\n",
      "Epoch 8/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6655 - categorical_accuracy: 0.7433\n",
      "Epoch 00008: saving model to model_init_2021-11-3015_56_01.229903/model-00008-0.66553-0.74332-3.05088-0.37500.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.6655 - categorical_accuracy: 0.7433 - val_loss: 3.0509 - val_categorical_accuracy: 0.3750\n",
      "Epoch 9/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.9071 - categorical_accuracy: 0.6738\n",
      "Epoch 00009: saving model to model_init_2021-11-3015_56_01.229903/model-00009-0.90709-0.67380-1.44262-0.62500.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.9071 - categorical_accuracy: 0.6738 - val_loss: 1.4426 - val_categorical_accuracy: 0.6250\n",
      "Epoch 10/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7026 - categorical_accuracy: 0.7326\n",
      "Epoch 00010: saving model to model_init_2021-11-3015_56_01.229903/model-00010-0.70256-0.73262-1.24177-0.25000.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.7026 - categorical_accuracy: 0.7326 - val_loss: 1.2418 - val_categorical_accuracy: 0.2500\n",
      "Epoch 11/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5651 - categorical_accuracy: 0.7754\n",
      "Epoch 00011: saving model to model_init_2021-11-3015_56_01.229903/model-00011-0.56515-0.77540-3.66242-0.25000.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.5651 - categorical_accuracy: 0.7754 - val_loss: 3.6624 - val_categorical_accuracy: 0.2500\n",
      "Epoch 12/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6369 - categorical_accuracy: 0.7754\n",
      "Epoch 00012: saving model to model_init_2021-11-3015_56_01.229903/model-00012-0.63685-0.77540-2.60692-0.25000.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.6369 - categorical_accuracy: 0.7754 - val_loss: 2.6069 - val_categorical_accuracy: 0.2500\n",
      "Epoch 13/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5268 - categorical_accuracy: 0.8075\n",
      "Epoch 00013: saving model to model_init_2021-11-3015_56_01.229903/model-00013-0.52677-0.80749-1.75772-0.37500.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.5268 - categorical_accuracy: 0.8075 - val_loss: 1.7577 - val_categorical_accuracy: 0.3750\n",
      "Epoch 14/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5442 - categorical_accuracy: 0.8021\n",
      "Epoch 00014: saving model to model_init_2021-11-3015_56_01.229903/model-00014-0.54415-0.80214-2.22773-0.50000.h5\n",
      "\n",
      "Epoch 00014: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.5442 - categorical_accuracy: 0.8021 - val_loss: 2.2277 - val_categorical_accuracy: 0.5000\n",
      "Epoch 15/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3766 - categorical_accuracy: 0.8824\n",
      "Epoch 00015: saving model to model_init_2021-11-3015_56_01.229903/model-00015-0.37661-0.88235-2.91765-0.25000.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.3766 - categorical_accuracy: 0.8824 - val_loss: 2.9176 - val_categorical_accuracy: 0.2500\n",
      "Epoch 16/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.4697 - categorical_accuracy: 0.8021\n",
      "Epoch 00016: saving model to model_init_2021-11-3015_56_01.229903/model-00016-0.46974-0.80214-2.07128-0.37500.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.4697 - categorical_accuracy: 0.8021 - val_loss: 2.0713 - val_categorical_accuracy: 0.3750\n",
      "Epoch 17/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3437 - categorical_accuracy: 0.9037\n",
      "Epoch 00017: saving model to model_init_2021-11-3015_56_01.229903/model-00017-0.34366-0.90374-1.68049-0.50000.h5\n",
      "11/11 [==============================] - 20s 2s/step - loss: 0.3437 - categorical_accuracy: 0.9037 - val_loss: 1.6805 - val_categorical_accuracy: 0.5000\n",
      "Epoch 18/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3784 - categorical_accuracy: 0.8610\n",
      "Epoch 00018: saving model to model_init_2021-11-3015_56_01.229903/model-00018-0.37842-0.86096-0.53686-0.87500.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.3784 - categorical_accuracy: 0.8610 - val_loss: 0.5369 - val_categorical_accuracy: 0.8750\n",
      "Epoch 19/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3731 - categorical_accuracy: 0.8770\n",
      "Epoch 00019: saving model to model_init_2021-11-3015_56_01.229903/model-00019-0.37313-0.87701-1.74385-0.50000.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.3731 - categorical_accuracy: 0.8770 - val_loss: 1.7438 - val_categorical_accuracy: 0.5000\n",
      "Epoch 20/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2620 - categorical_accuracy: 0.9144\n",
      "Epoch 00020: saving model to model_init_2021-11-3015_56_01.229903/model-00020-0.26204-0.91444-1.17519-0.62500.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.2620 - categorical_accuracy: 0.9144 - val_loss: 1.1752 - val_categorical_accuracy: 0.6250\n",
      "Epoch 21/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3500 - categorical_accuracy: 0.8877\n",
      "Epoch 00021: saving model to model_init_2021-11-3015_56_01.229903/model-00021-0.34998-0.88770-1.01323-0.62500.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.3500 - categorical_accuracy: 0.8877 - val_loss: 1.0132 - val_categorical_accuracy: 0.6250\n",
      "Epoch 22/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2779 - categorical_accuracy: 0.9198\n",
      "Epoch 00022: saving model to model_init_2021-11-3015_56_01.229903/model-00022-0.27790-0.91979-1.38788-0.50000.h5\n",
      "\n",
      "Epoch 00022: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n",
      "11/11 [==============================] - 20s 2s/step - loss: 0.2779 - categorical_accuracy: 0.9198 - val_loss: 1.3879 - val_categorical_accuracy: 0.5000\n",
      "Epoch 23/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3047 - categorical_accuracy: 0.9037\n",
      "Epoch 00023: saving model to model_init_2021-11-3015_56_01.229903/model-00023-0.30474-0.90374-0.84353-0.62500.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.3047 - categorical_accuracy: 0.9037 - val_loss: 0.8435 - val_categorical_accuracy: 0.6250\n",
      "Epoch 24/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2292 - categorical_accuracy: 0.9198\n",
      "Epoch 00024: saving model to model_init_2021-11-3015_56_01.229903/model-00024-0.22922-0.91979-2.17576-0.25000.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.2292 - categorical_accuracy: 0.9198 - val_loss: 2.1758 - val_categorical_accuracy: 0.2500\n",
      "Epoch 25/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2343 - categorical_accuracy: 0.9305\n",
      "Epoch 00025: saving model to model_init_2021-11-3015_56_01.229903/model-00025-0.23429-0.93048-0.90557-0.50000.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.2343 - categorical_accuracy: 0.9305 - val_loss: 0.9056 - val_categorical_accuracy: 0.5000\n",
      "Epoch 26/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2365 - categorical_accuracy: 0.9572\n",
      "Epoch 00026: saving model to model_init_2021-11-3015_56_01.229903/model-00026-0.23652-0.95722-1.38198-0.50000.h5\n",
      "\n",
      "Epoch 00026: ReduceLROnPlateau reducing learning rate to 8.000000525498762e-06.\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.2365 - categorical_accuracy: 0.9572 - val_loss: 1.3820 - val_categorical_accuracy: 0.5000\n",
      "Epoch 27/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2424 - categorical_accuracy: 0.9091\n",
      "Epoch 00027: saving model to model_init_2021-11-3015_56_01.229903/model-00027-0.24245-0.90909-0.34424-1.00000.h5\n",
      "11/11 [==============================] - 21s 2s/step - loss: 0.2424 - categorical_accuracy: 0.9091 - val_loss: 0.3442 - val_categorical_accuracy: 1.0000\n",
      "Epoch 28/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1660 - categorical_accuracy: 0.9679\n",
      "Epoch 00028: saving model to model_init_2021-11-3015_56_01.229903/model-00028-0.16596-0.96791-1.83315-0.50000.h5\n",
      "11/11 [==============================] - 22s 2s/step - loss: 0.1660 - categorical_accuracy: 0.9679 - val_loss: 1.8331 - val_categorical_accuracy: 0.5000\n",
      "Epoch 29/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1848 - categorical_accuracy: 0.9572\n",
      "Epoch 00029: saving model to model_init_2021-11-3015_56_01.229903/model-00029-0.18475-0.95722-1.29870-0.50000.h5\n",
      "11/11 [==============================] - 20s 2s/step - loss: 0.1848 - categorical_accuracy: 0.9572 - val_loss: 1.2987 - val_categorical_accuracy: 0.5000\n",
      "Epoch 30/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1905 - categorical_accuracy: 0.9572\n",
      "Epoch 00030: saving model to model_init_2021-11-3015_56_01.229903/model-00030-0.19047-0.95722-0.77911-0.75000.h5\n",
      "11/11 [==============================] - 23s 2s/step - loss: 0.1905 - categorical_accuracy: 0.9572 - val_loss: 0.7791 - val_categorical_accuracy: 0.7500\n"
     ]
    }
   ],
   "source": [
    "#### n_frames = 30\n",
    "num_epochs = 30\n",
    "batch_size = 64\n",
    "\n",
    "img_tensor = getImgTensor(n_frames)\n",
    "train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n",
    "\n",
    "if (num_train_sequences%batch_size) == 0:\n",
    "    steps_per_epoch = int(num_train_sequences/batch_size)\n",
    "else:\n",
    "    steps_per_epoch = (num_train_sequences//batch_size) + 1\n",
    "\n",
    "if (num_val_sequences%batch_size) == 0:\n",
    "    validation_steps = int(num_val_sequences/batch_size)\n",
    "else:\n",
    "    validation_steps = (num_val_sequences//batch_size) + 1\n",
    "    \n",
    "inputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n",
    "\n",
    "model2 = Sequential([\n",
    "    Conv3D(16, make3dFilter(5), activation='relu', input_shape=inputShape),\n",
    "    MaxPooling3D(make3dFilter(2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Conv3D(32, make3dFilter(3), activation='relu'),\n",
    "    MaxPooling3D(pool_size=(1,2,2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Conv3D(64, make3dFilter(3), activation='relu'),\n",
    "    MaxPooling3D(pool_size=(1,2,2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Flatten(),\n",
    "    Dense(128, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.25),\n",
    "\n",
    "    Dense(64, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.25),\n",
    "\n",
    "    Dense(5, activation='softmax')\n",
    "], name=\"conv_3d2\")\n",
    "model2.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
    "print(model2.summary())\n",
    "\n",
    "model2_history = model2.fit(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n",
    "            callbacks=callbacks_list, validation_data=val_generator, \n",
    "            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max. Training Accuracy 0.9679144620895386\n",
      "Max. Validaiton Accuracy 1.0\n"
     ]
    }
   ],
   "source": [
    "plotModelHistory(model2_history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 3: Frames-30, Epochs-20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"conv_3d3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv3d_9 (Conv3D)            (None, 30, 100, 100, 16)  1312      \n",
      "_________________________________________________________________\n",
      "max_pooling3d_9 (MaxPooling3 (None, 15, 50, 50, 16)    0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_15 (Batc (None, 15, 50, 50, 16)    64        \n",
      "_________________________________________________________________\n",
      "conv3d_10 (Conv3D)           (None, 15, 50, 50, 32)    13856     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_10 (MaxPooling (None, 8, 25, 25, 32)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_16 (Batc (None, 8, 25, 25, 32)     128       \n",
      "_________________________________________________________________\n",
      "conv3d_11 (Conv3D)           (None, 8, 25, 25, 64)     55360     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_11 (MaxPooling (None, 4, 13, 13, 64)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_17 (Batc (None, 4, 13, 13, 64)     256       \n",
      "_________________________________________________________________\n",
      "flatten_3 (Flatten)          (None, 43264)             0         \n",
      "_________________________________________________________________\n",
      "dense_9 (Dense)              (None, 128)               5537920   \n",
      "_________________________________________________________________\n",
      "batch_normalization_18 (Batc (None, 128)               512       \n",
      "_________________________________________________________________\n",
      "dropout_6 (Dropout)          (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_10 (Dense)             (None, 64)                8256      \n",
      "_________________________________________________________________\n",
      "batch_normalization_19 (Batc (None, 64)                256       \n",
      "_________________________________________________________________\n",
      "dropout_7 (Dropout)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_11 (Dense)             (None, 5)                 325       \n",
      "=================================================================\n",
      "Total params: 5,618,245\n",
      "Trainable params: 5,617,637\n",
      "Non-trainable params: 608\n",
      "_________________________________________________________________\n",
      "None\n",
      "Source path =  /home/datasets/Project_data/train ; batch size = 64\n",
      "Epoch 1/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 1.4822 - categorical_accuracy: 0.4842 Source path =  /home/datasets/Project_data/val ; batch size = 64\n",
      "\n",
      "Epoch 00001: saving model to model_init_2021-11-3015_56_01.229903/model-00001-1.48224-0.48416-2.30814-0.25000.h5\n",
      "11/11 [==============================] - 162s 15s/step - loss: 1.4822 - categorical_accuracy: 0.4842 - val_loss: 2.3081 - val_categorical_accuracy: 0.2500\n",
      "Epoch 2/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7653 - categorical_accuracy: 0.7036\n",
      "Epoch 00002: saving model to model_init_2021-11-3015_56_01.229903/model-00002-0.76528-0.70356-1.49154-0.18750.h5\n",
      "11/11 [==============================] - 67s 6s/step - loss: 0.7653 - categorical_accuracy: 0.7036 - val_loss: 1.4915 - val_categorical_accuracy: 0.1875\n",
      "Epoch 3/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7024 - categorical_accuracy: 0.7589\n",
      "Epoch 00003: saving model to model_init_2021-11-3015_56_01.229903/model-00003-0.70242-0.75889-1.73537-0.37500.h5\n",
      "11/11 [==============================] - 65s 6s/step - loss: 0.7024 - categorical_accuracy: 0.7589 - val_loss: 1.7354 - val_categorical_accuracy: 0.3750\n",
      "Epoch 4/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7389 - categorical_accuracy: 0.7554\n",
      "Epoch 00004: saving model to model_init_2021-11-3015_56_01.229903/model-00004-0.73893-0.75536-2.18324-0.18750.h5\n",
      "11/11 [==============================] - 53s 5s/step - loss: 0.7389 - categorical_accuracy: 0.7554 - val_loss: 2.1832 - val_categorical_accuracy: 0.1875\n",
      "Epoch 5/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5433 - categorical_accuracy: 0.7943\n",
      "Epoch 00005: saving model to model_init_2021-11-3015_56_01.229903/model-00005-0.54333-0.79426-2.75806-0.28125.h5\n",
      "11/11 [==============================] - 50s 5s/step - loss: 0.5433 - categorical_accuracy: 0.7943 - val_loss: 2.7581 - val_categorical_accuracy: 0.2812\n",
      "Epoch 6/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.4626 - categorical_accuracy: 0.8278\n",
      "Epoch 00006: saving model to model_init_2021-11-3015_56_01.229903/model-00006-0.46262-0.82775-1.86134-0.37500.h5\n",
      "\n",
      "Epoch 00006: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n",
      "11/11 [==============================] - 44s 4s/step - loss: 0.4626 - categorical_accuracy: 0.8278 - val_loss: 1.8613 - val_categorical_accuracy: 0.3750\n",
      "Epoch 7/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5262 - categorical_accuracy: 0.8128\n",
      "Epoch 00007: saving model to model_init_2021-11-3015_56_01.229903/model-00007-0.52624-0.81281-2.21486-0.12500.h5\n",
      "11/11 [==============================] - 41s 4s/step - loss: 0.5262 - categorical_accuracy: 0.8128 - val_loss: 2.2149 - val_categorical_accuracy: 0.1250\n",
      "Epoch 8/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3816 - categorical_accuracy: 0.8717\n",
      "Epoch 00008: saving model to model_init_2021-11-3015_56_01.229903/model-00008-0.38157-0.87166-2.57062-0.37500.h5\n",
      "11/11 [==============================] - 40s 4s/step - loss: 0.3816 - categorical_accuracy: 0.8717 - val_loss: 2.5706 - val_categorical_accuracy: 0.3750\n",
      "Epoch 9/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3109 - categorical_accuracy: 0.8930\n",
      "Epoch 00009: saving model to model_init_2021-11-3015_56_01.229903/model-00009-0.31095-0.89305-2.21036-0.00000.h5\n",
      "11/11 [==============================] - 40s 4s/step - loss: 0.3109 - categorical_accuracy: 0.8930 - val_loss: 2.2104 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 10/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.4129 - categorical_accuracy: 0.8342\n",
      "Epoch 00010: saving model to model_init_2021-11-3015_56_01.229903/model-00010-0.41295-0.83422-3.09073-0.00000.h5\n",
      "\n",
      "Epoch 00010: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n",
      "11/11 [==============================] - 39s 4s/step - loss: 0.4129 - categorical_accuracy: 0.8342 - val_loss: 3.0907 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 11/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.4240 - categorical_accuracy: 0.8396\n",
      "Epoch 00011: saving model to model_init_2021-11-3015_56_01.229903/model-00011-0.42399-0.83957-2.30377-0.12500.h5\n",
      "11/11 [==============================] - 38s 3s/step - loss: 0.4240 - categorical_accuracy: 0.8396 - val_loss: 2.3038 - val_categorical_accuracy: 0.1250\n",
      "Epoch 12/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3717 - categorical_accuracy: 0.8663\n",
      "Epoch 00012: saving model to model_init_2021-11-3015_56_01.229903/model-00012-0.37166-0.86631-1.95535-0.37500.h5\n",
      "11/11 [==============================] - 39s 4s/step - loss: 0.3717 - categorical_accuracy: 0.8663 - val_loss: 1.9554 - val_categorical_accuracy: 0.3750\n",
      "Epoch 13/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3898 - categorical_accuracy: 0.8770\n",
      "Epoch 00013: saving model to model_init_2021-11-3015_56_01.229903/model-00013-0.38984-0.87701-2.32814-0.25000.h5\n",
      "11/11 [==============================] - 38s 3s/step - loss: 0.3898 - categorical_accuracy: 0.8770 - val_loss: 2.3281 - val_categorical_accuracy: 0.2500\n",
      "Epoch 14/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3429 - categorical_accuracy: 0.8877\n",
      "Epoch 00014: saving model to model_init_2021-11-3015_56_01.229903/model-00014-0.34288-0.88770-3.24094-0.12500.h5\n",
      "\n",
      "Epoch 00014: ReduceLROnPlateau reducing learning rate to 8.000000525498762e-06.\n",
      "11/11 [==============================] - 39s 4s/step - loss: 0.3429 - categorical_accuracy: 0.8877 - val_loss: 3.2409 - val_categorical_accuracy: 0.1250\n",
      "Epoch 15/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3810 - categorical_accuracy: 0.8824\n",
      "Epoch 00015: saving model to model_init_2021-11-3015_56_01.229903/model-00015-0.38103-0.88235-2.64193-0.12500.h5\n",
      "11/11 [==============================] - 40s 4s/step - loss: 0.3810 - categorical_accuracy: 0.8824 - val_loss: 2.6419 - val_categorical_accuracy: 0.1250\n",
      "Epoch 16/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.4273 - categorical_accuracy: 0.8396\n",
      "Epoch 00016: saving model to model_init_2021-11-3015_56_01.229903/model-00016-0.42728-0.83957-3.52449-0.00000.h5\n",
      "11/11 [==============================] - 38s 3s/step - loss: 0.4273 - categorical_accuracy: 0.8396 - val_loss: 3.5245 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 17/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3067 - categorical_accuracy: 0.8930\n",
      "Epoch 00017: saving model to model_init_2021-11-3015_56_01.229903/model-00017-0.30667-0.89305-2.27429-0.37500.h5\n",
      "11/11 [==============================] - 39s 4s/step - loss: 0.3067 - categorical_accuracy: 0.8930 - val_loss: 2.2743 - val_categorical_accuracy: 0.3750\n",
      "Epoch 18/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3098 - categorical_accuracy: 0.8717\n",
      "Epoch 00018: saving model to model_init_2021-11-3015_56_01.229903/model-00018-0.30984-0.87166-2.01331-0.25000.h5\n",
      "\n",
      "Epoch 00018: ReduceLROnPlateau reducing learning rate to 1.6000001778593287e-06.\n",
      "11/11 [==============================] - 39s 4s/step - loss: 0.3098 - categorical_accuracy: 0.8717 - val_loss: 2.0133 - val_categorical_accuracy: 0.2500\n",
      "Epoch 19/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3103 - categorical_accuracy: 0.8984\n",
      "Epoch 00019: saving model to model_init_2021-11-3015_56_01.229903/model-00019-0.31030-0.89840-2.47034-0.12500.h5\n",
      "11/11 [==============================] - 38s 3s/step - loss: 0.3103 - categorical_accuracy: 0.8984 - val_loss: 2.4703 - val_categorical_accuracy: 0.1250\n",
      "Epoch 20/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2798 - categorical_accuracy: 0.9091\n",
      "Epoch 00020: saving model to model_init_2021-11-3015_56_01.229903/model-00020-0.27984-0.90909-2.72956-0.12500.h5\n",
      "11/11 [==============================] - 40s 4s/step - loss: 0.2798 - categorical_accuracy: 0.9091 - val_loss: 2.7296 - val_categorical_accuracy: 0.1250\n"
     ]
    }
   ],
   "source": [
    "n_frames = 30\n",
    "num_epochs = 20\n",
    "batch_size = 64\n",
    "\n",
    "img_tensor = getImgTensor(n_frames)\n",
    "train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n",
    "\n",
    "if (num_train_sequences%batch_size) == 0:\n",
    "    steps_per_epoch = int(num_train_sequences/batch_size)\n",
    "else:\n",
    "    steps_per_epoch = (num_train_sequences//batch_size) + 1\n",
    "\n",
    "if (num_val_sequences%batch_size) == 0:\n",
    "    validation_steps = int(num_val_sequences/batch_size)\n",
    "else:\n",
    "    validation_steps = (num_val_sequences//batch_size) + 1\n",
    "    \n",
    "inputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n",
    "\n",
    "model3 = Sequential([\n",
    "    Conv3D(16, make3dFilter(3), padding='same', activation='relu', input_shape=inputShape),\n",
    "    MaxPooling3D(make3dFilter(2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Conv3D(32, make3dFilter(3), padding='same', activation='relu'),\n",
    "    MaxPooling3D(pool_size=(2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Conv3D(64, make3dFilter(3), padding='same', activation='relu'),\n",
    "    MaxPooling3D(pool_size=(2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Flatten(),\n",
    "    Dense(128, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.25),\n",
    "\n",
    "    Dense(64, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.25),\n",
    "\n",
    "    Dense(5, activation='softmax')\n",
    "], name=\"conv_3d3\")\n",
    "model3.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
    "print(model3.summary())\n",
    "\n",
    "model3_history = model3.fit(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n",
    "            callbacks=callbacks_list, validation_data=val_generator, \n",
    "            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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9OnExMTw4IMPAmYEycvLix9//JHTp09TVFTEiy++yPjx42u0v3/+85989tlneHh4cNVVV/GPf/yD9957j3fffZfCwkI6duzIp59+yrZt21i0aBE//fQTL774Il9//TUADz74IBkZGQQEBPDee+/RtWtXDh48yNSpUzl37hzjx4/n9ddfJzc3F601f/jDH1i6dClKKZ599lkmTZrEypUr+dOf/kRYWBh79uxh3759F40E1jTGgICAau9vZbdLS0vjvvvu49Ah02H57bffZvDgwcycOZNXXnkFpRQ9e/bk008/5fbbb2fcuHHcdJPp0lcaa0X3Y8KECSQnJ5Ofn8+jjz7KvffeC8CyZcv44x//SElJCS1atOD777+nS5curF27loiICCwWC50vHcK6Be8TEX4efINq94dSnc0fwuGfYNzrEBpr332LumnREUY9B8v/CNtnQ6/J5nJZ6Nrlql1HzVEqWiNGiLpIy85n05FTbD5ymo2HT7E7NRutzYf77m1C6GsdcevbNowW1XzILi6xsO5QFou3n2RZYipn84oI8fPiqu6tGZfQmkHtw11e9ldTeYUleHhQ61LI2igstnDs1DkOpOdyMONCGeLBjHPkFhSXbRfk60WHiECC/LxIOZ3HiTN5ZaOAYL68axVsErGY5gHEhPkTHRZAdHN/YsICaN3MzyWPe35RCct2pTJrw1E2HTmNj6cHY7tHMmVALAPaNW8wcyXdgayjVjsNcR21X375hccee4yffvoJgG7durF8+XKaNWtGSEgImZmZDBw4kP3796OUqrL0cenSpfzlL39hxYoVBAQEcOrUKZo3b05WVhbh4aaS4Nlnn6VVq1Y8/PDDv0pQRo0axYwZM+jUqRMbNmzg6aef5ocffmDcuHFMnTqVyZMnM2PGDH73u9+Rm5vL119/zYwZM1i2bBmZmZn069ePDRs2sHfvXq655hp27dpFu3amNXxp3LWNsbrSx8puN2nSJAYNGsRjjz1GSUkJubm5pKSkcP3117N27VpatGhRduyqErXy96P0Nnl5efTr14+ffvoJi8XCpZdeyqpVq2jXrl3ZNv/3f/9Hs2bNeOyxx/juu+94Z8bbfP3mcxDSBoIufDFY77/B00fgv4PNCM20+TKa1pBYSuDjayA9CR5Yb577LyZD5j54eIuro2vU6ruOmhANWqsQP8b1bMO4nm0A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\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max. Training Accuracy 0.9090909361839294\n",
      "Max. Validaiton Accuracy 0.375\n"
     ]
    }
   ],
   "source": [
    "plotModelHistory(model3_history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 4: Frames-20, Added Conv3D Layer giving Reduced Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"conv_3d4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv3d_12 (Conv3D)           (None, 20, 100, 100, 16)  1312      \n",
      "_________________________________________________________________\n",
      "max_pooling3d_12 (MaxPooling (None, 10, 50, 50, 16)    0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_20 (Batc (None, 10, 50, 50, 16)    64        \n",
      "_________________________________________________________________\n",
      "conv3d_13 (Conv3D)           (None, 10, 50, 50, 32)    13856     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_13 (MaxPooling (None, 5, 25, 25, 32)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_21 (Batc (None, 5, 25, 25, 32)     128       \n",
      "_________________________________________________________________\n",
      "conv3d_14 (Conv3D)           (None, 5, 25, 25, 64)     55360     \n",
      "_________________________________________________________________\n",
      "max_pooling3d_14 (MaxPooling (None, 3, 13, 13, 64)     0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_22 (Batc (None, 3, 13, 13, 64)     256       \n",
      "_________________________________________________________________\n",
      "conv3d_15 (Conv3D)           (None, 3, 13, 13, 128)    221312    \n",
      "_________________________________________________________________\n",
      "max_pooling3d_15 (MaxPooling (None, 2, 7, 7, 128)      0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_23 (Batc (None, 2, 7, 7, 128)      512       \n",
      "_________________________________________________________________\n",
      "flatten_4 (Flatten)          (None, 12544)             0         \n",
      "_________________________________________________________________\n",
      "dense_12 (Dense)             (None, 128)               1605760   \n",
      "_________________________________________________________________\n",
      "batch_normalization_24 (Batc (None, 128)               512       \n",
      "_________________________________________________________________\n",
      "dropout_8 (Dropout)          (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_13 (Dense)             (None, 64)                8256      \n",
      "_________________________________________________________________\n",
      "batch_normalization_25 (Batc (None, 64)                256       \n",
      "_________________________________________________________________\n",
      "dropout_9 (Dropout)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_14 (Dense)             (None, 5)                 325       \n",
      "=================================================================\n",
      "Total params: 1,907,909\n",
      "Trainable params: 1,907,045\n",
      "Non-trainable params: 864\n",
      "_________________________________________________________________\n",
      "None\n",
      "Source path =  /home/datasets/Project_data/train ; batch size = 64\n",
      "Epoch 1/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 1.3359 - categorical_accuracy: 0.5128Source path =  /home/datasets/Project_data/val ; batch size = 64\n",
      "\n",
      "Epoch 00001: saving model to model_init_2021-11-3015_56_01.229903/model-00001-1.33589-0.51282-1.60726-0.21000.h5\n",
      "11/11 [==============================] - 104s 9s/step - loss: 1.3359 - categorical_accuracy: 0.5128 - val_loss: 1.6073 - val_categorical_accuracy: 0.2100\n",
      "Epoch 2/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.8660 - categorical_accuracy: 0.6482\n",
      "Epoch 00002: saving model to model_init_2021-11-3015_56_01.229903/model-00002-0.86599-0.64822-1.78070-0.18750.h5\n",
      "11/11 [==============================] - 47s 4s/step - loss: 0.8660 - categorical_accuracy: 0.6482 - val_loss: 1.7807 - val_categorical_accuracy: 0.1875\n",
      "Epoch 3/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7299 - categorical_accuracy: 0.7273\n",
      "Epoch 00003: saving model to model_init_2021-11-3015_56_01.229903/model-00003-0.72989-0.72727-2.96265-0.17857.h5\n",
      "11/11 [==============================] - 44s 4s/step - loss: 0.7299 - categorical_accuracy: 0.7273 - val_loss: 2.9626 - val_categorical_accuracy: 0.1786\n",
      "Epoch 4/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6765 - categorical_accuracy: 0.7682\n",
      "Epoch 00004: saving model to model_init_2021-11-3015_56_01.229903/model-00004-0.67653-0.76824-2.46605-0.28125.h5\n",
      "11/11 [==============================] - 37s 3s/step - loss: 0.6765 - categorical_accuracy: 0.7682 - val_loss: 2.4661 - val_categorical_accuracy: 0.2812\n",
      "Epoch 5/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6141 - categorical_accuracy: 0.7703\n",
      "Epoch 00005: saving model to model_init_2021-11-3015_56_01.229903/model-00005-0.61405-0.77033-2.85777-0.12500.h5\n",
      "\n",
      "Epoch 00005: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n",
      "11/11 [==============================] - 33s 3s/step - loss: 0.6141 - categorical_accuracy: 0.7703 - val_loss: 2.8578 - val_categorical_accuracy: 0.1250\n",
      "Epoch 6/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.6100 - categorical_accuracy: 0.7656\n",
      "Epoch 00006: saving model to model_init_2021-11-3015_56_01.229903/model-00006-0.61002-0.76555-2.73514-0.25000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.6100 - categorical_accuracy: 0.7656 - val_loss: 2.7351 - val_categorical_accuracy: 0.2500\n",
      "Epoch 7/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.4237 - categorical_accuracy: 0.8571\n",
      "Epoch 00007: saving model to model_init_2021-11-3015_56_01.229903/model-00007-0.42370-0.85714-3.67147-0.12500.h5\n",
      "11/11 [==============================] - 31s 3s/step - loss: 0.4237 - categorical_accuracy: 0.8571 - val_loss: 3.6715 - val_categorical_accuracy: 0.1250\n",
      "Epoch 8/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.4338 - categorical_accuracy: 0.8342\n",
      "Epoch 00008: saving model to model_init_2021-11-3015_56_01.229903/model-00008-0.43385-0.83422-4.49681-0.12500.h5\n",
      "11/11 [==============================] - 25s 2s/step - loss: 0.4338 - categorical_accuracy: 0.8342 - val_loss: 4.4968 - val_categorical_accuracy: 0.1250\n",
      "Epoch 9/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3524 - categorical_accuracy: 0.8770\n",
      "Epoch 00009: saving model to model_init_2021-11-3015_56_01.229903/model-00009-0.35243-0.87701-2.01764-0.25000.h5\n",
      "\n",
      "Epoch 00009: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.3524 - categorical_accuracy: 0.8770 - val_loss: 2.0176 - val_categorical_accuracy: 0.2500\n",
      "Epoch 10/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3539 - categorical_accuracy: 0.8770\n",
      "Epoch 00010: saving model to model_init_2021-11-3015_56_01.229903/model-00010-0.35387-0.87701-3.32374-0.25000.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.3539 - categorical_accuracy: 0.8770 - val_loss: 3.3237 - val_categorical_accuracy: 0.2500\n",
      "Epoch 11/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3669 - categorical_accuracy: 0.8556\n",
      "Epoch 00011: saving model to model_init_2021-11-3015_56_01.229903/model-00011-0.36691-0.85561-4.99601-0.00000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.3669 - categorical_accuracy: 0.8556 - val_loss: 4.9960 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 12/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3130 - categorical_accuracy: 0.9091\n",
      "Epoch 00012: saving model to model_init_2021-11-3015_56_01.229903/model-00012-0.31304-0.90909-4.60259-0.00000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.3130 - categorical_accuracy: 0.9091 - val_loss: 4.6026 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 13/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2665 - categorical_accuracy: 0.9144\n",
      "Epoch 00013: saving model to model_init_2021-11-3015_56_01.229903/model-00013-0.26648-0.91444-1.89954-0.37500.h5\n",
      "\n",
      "Epoch 00013: ReduceLROnPlateau reducing learning rate to 8.000000525498762e-06.\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.2665 - categorical_accuracy: 0.9144 - val_loss: 1.8995 - val_categorical_accuracy: 0.3750\n",
      "Epoch 14/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3684 - categorical_accuracy: 0.8770\n",
      "Epoch 00014: saving model to model_init_2021-11-3015_56_01.229903/model-00014-0.36837-0.87701-3.80998-0.25000.h5\n",
      "11/11 [==============================] - 25s 2s/step - loss: 0.3684 - categorical_accuracy: 0.8770 - val_loss: 3.8100 - val_categorical_accuracy: 0.2500\n",
      "Epoch 15/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3002 - categorical_accuracy: 0.8930\n",
      "Epoch 00015: saving model to model_init_2021-11-3015_56_01.229903/model-00015-0.30023-0.89305-4.69426-0.00000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.3002 - categorical_accuracy: 0.8930 - val_loss: 4.6943 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 16/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2592 - categorical_accuracy: 0.8930\n",
      "Epoch 00016: saving model to model_init_2021-11-3015_56_01.229903/model-00016-0.25925-0.89305-3.29197-0.25000.h5\n",
      "11/11 [==============================] - 25s 2s/step - loss: 0.2592 - categorical_accuracy: 0.8930 - val_loss: 3.2920 - val_categorical_accuracy: 0.2500\n",
      "Epoch 17/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2896 - categorical_accuracy: 0.8984\n",
      "Epoch 00017: saving model to model_init_2021-11-3015_56_01.229903/model-00017-0.28958-0.89840-3.21491-0.25000.h5\n",
      "\n",
      "Epoch 00017: ReduceLROnPlateau reducing learning rate to 1.6000001778593287e-06.\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.2896 - categorical_accuracy: 0.8984 - val_loss: 3.2149 - val_categorical_accuracy: 0.2500\n",
      "Epoch 18/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2677 - categorical_accuracy: 0.9144\n",
      "Epoch 00018: saving model to model_init_2021-11-3015_56_01.229903/model-00018-0.26775-0.91444-3.04839-0.00000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.2677 - categorical_accuracy: 0.9144 - val_loss: 3.0484 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 19/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3237 - categorical_accuracy: 0.9251\n",
      "Epoch 00019: saving model to model_init_2021-11-3015_56_01.229903/model-00019-0.32372-0.92513-4.52731-0.12500.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.3237 - categorical_accuracy: 0.9251 - val_loss: 4.5273 - val_categorical_accuracy: 0.1250\n",
      "Epoch 20/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3155 - categorical_accuracy: 0.8824\n",
      "Epoch 00020: saving model to model_init_2021-11-3015_56_01.229903/model-00020-0.31548-0.88235-4.33948-0.12500.h5\n",
      "11/11 [==============================] - 25s 2s/step - loss: 0.3155 - categorical_accuracy: 0.8824 - val_loss: 4.3395 - val_categorical_accuracy: 0.1250\n"
     ]
    }
   ],
   "source": [
    "n_frames = 20\n",
    "num_epochs = 20\n",
    "batch_size = 64\n",
    "\n",
    "img_tensor = getImgTensor(n_frames)\n",
    "train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n",
    "\n",
    "if (num_train_sequences%batch_size) == 0:\n",
    "    steps_per_epoch = int(num_train_sequences/batch_size)\n",
    "else:\n",
    "    steps_per_epoch = (num_train_sequences//batch_size) + 1\n",
    "\n",
    "if (num_val_sequences%batch_size) == 0:\n",
    "    validation_steps = int(num_val_sequences/batch_size)\n",
    "else:\n",
    "    validation_steps = (num_val_sequences//batch_size) + 1\n",
    "    \n",
    "inputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n",
    "\n",
    "model4 = Sequential([\n",
    "    Conv3D(16, make3dFilter(3), padding='same', activation='relu', input_shape=inputShape),\n",
    "    MaxPooling3D(make3dFilter(2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Conv3D(32, make3dFilter(3), padding='same', activation='relu'),\n",
    "    MaxPooling3D(pool_size=(2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Conv3D(64, make3dFilter(3), padding='same', activation='relu'),\n",
    "    MaxPooling3D(pool_size=(2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Conv3D(128, make3dFilter(3), padding='same', activation='relu'),\n",
    "    MaxPooling3D(pool_size=(2), padding='same'),\n",
    "    BatchNormalization(),\n",
    "\n",
    "    Flatten(),\n",
    "    Dense(128, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.25),\n",
    "\n",
    "    Dense(64, activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dropout(0.25),\n",
    "\n",
    "    Dense(5, activation='softmax')\n",
    "], name=\"conv_3d4\")\n",
    "model4.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
    "print(model4.summary())\n",
    "\n",
    "model4_history = model4.fit(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n",
    "            callbacks=callbacks_list, validation_data=val_generator, \n",
    "            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max. Training Accuracy 0.9251337051391602\n",
      "Max. Validaiton Accuracy 0.375\n"
     ]
    }
   ],
   "source": [
    "plotModelHistory(model4_history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 5: Frames:20, Epochs-20, Switching BatchNormalization before MaxPooling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"conv_3d5\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv3d_16 (Conv3D)           (None, 20, 100, 100, 16)  400       \n",
      "_________________________________________________________________\n",
      "batch_normalization_26 (Batc (None, 20, 100, 100, 16)  64        \n",
      "_________________________________________________________________\n",
      "max_pooling3d_16 (MaxPooling (None, 10, 50, 50, 16)    0         \n",
      "_________________________________________________________________\n",
      "conv3d_17 (Conv3D)           (None, 10, 50, 50, 32)    4128      \n",
      "_________________________________________________________________\n",
      "batch_normalization_27 (Batc (None, 10, 50, 50, 32)    128       \n",
      "_________________________________________________________________\n",
      "max_pooling3d_17 (MaxPooling (None, 5, 25, 25, 32)     0         \n",
      "_________________________________________________________________\n",
      "conv3d_18 (Conv3D)           (None, 5, 25, 25, 64)     16448     \n",
      "_________________________________________________________________\n",
      "batch_normalization_28 (Batc (None, 5, 25, 25, 64)     256       \n",
      "_________________________________________________________________\n",
      "max_pooling3d_18 (MaxPooling (None, 2, 12, 12, 64)     0         \n",
      "_________________________________________________________________\n",
      "conv3d_19 (Conv3D)           (None, 2, 12, 12, 128)    65664     \n",
      "_________________________________________________________________\n",
      "batch_normalization_29 (Batc (None, 2, 12, 12, 128)    512       \n",
      "_________________________________________________________________\n",
      "max_pooling3d_19 (MaxPooling (None, 1, 6, 6, 128)      0         \n",
      "_________________________________________________________________\n",
      "flatten_5 (Flatten)          (None, 4608)              0         \n",
      "_________________________________________________________________\n",
      "dense_15 (Dense)             (None, 256)               1179904   \n",
      "_________________________________________________________________\n",
      "dense_16 (Dense)             (None, 128)               32896     \n",
      "_________________________________________________________________\n",
      "dense_17 (Dense)             (None, 5)                 645       \n",
      "=================================================================\n",
      "Total params: 1,301,045\n",
      "Trainable params: 1,300,565\n",
      "Non-trainable params: 480\n",
      "_________________________________________________________________\n",
      "None\n",
      "Source path =  /home/datasets/Project_data/train ; batch size = 64\n",
      "Epoch 1/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 3.3738 - categorical_accuracy: 0.3424Source path =  /home/datasets/Project_data/val ; batch size = 64\n",
      "\n",
      "Epoch 00001: saving model to model_init_2021-11-3015_56_01.229903/model-00001-3.37378-0.34238-1.56938-0.25000.h5\n",
      "11/11 [==============================] - 106s 10s/step - loss: 3.3738 - categorical_accuracy: 0.3424 - val_loss: 1.5694 - val_categorical_accuracy: 0.2500\n",
      "Epoch 2/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 1.0179 - categorical_accuracy: 0.5771\n",
      "Epoch 00002: saving model to model_init_2021-11-3015_56_01.229903/model-00002-1.01790-0.57708-2.53495-0.17188.h5\n",
      "11/11 [==============================] - 44s 4s/step - loss: 1.0179 - categorical_accuracy: 0.5771 - val_loss: 2.5350 - val_categorical_accuracy: 0.1719\n",
      "Epoch 3/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.7787 - categorical_accuracy: 0.7154\n",
      "Epoch 00003: saving model to model_init_2021-11-3015_56_01.229903/model-00003-0.77870-0.71542-3.98050-0.21429.h5\n",
      "11/11 [==============================] - 42s 4s/step - loss: 0.7787 - categorical_accuracy: 0.7154 - val_loss: 3.9805 - val_categorical_accuracy: 0.2143\n",
      "Epoch 4/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5304 - categorical_accuracy: 0.8155\n",
      "Epoch 00004: saving model to model_init_2021-11-3015_56_01.229903/model-00004-0.53039-0.81545-4.24204-0.21875.h5\n",
      "11/11 [==============================] - 38s 3s/step - loss: 0.5304 - categorical_accuracy: 0.8155 - val_loss: 4.2420 - val_categorical_accuracy: 0.2188\n",
      "Epoch 5/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3690 - categorical_accuracy: 0.8565\n",
      "Epoch 00005: saving model to model_init_2021-11-3015_56_01.229903/model-00005-0.36902-0.85646-6.12747-0.12500.h5\n",
      "\n",
      "Epoch 00005: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n",
      "11/11 [==============================] - 35s 3s/step - loss: 0.3690 - categorical_accuracy: 0.8565 - val_loss: 6.1275 - val_categorical_accuracy: 0.1250\n",
      "Epoch 6/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3294 - categorical_accuracy: 0.8612\n",
      "Epoch 00006: saving model to model_init_2021-11-3015_56_01.229903/model-00006-0.32943-0.86124-3.94386-0.25000.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.3294 - categorical_accuracy: 0.8612 - val_loss: 3.9439 - val_categorical_accuracy: 0.2500\n",
      "Epoch 7/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.3106 - categorical_accuracy: 0.9212\n",
      "Epoch 00007: saving model to model_init_2021-11-3015_56_01.229903/model-00007-0.31062-0.92118-7.38496-0.00000.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.3106 - categorical_accuracy: 0.9212 - val_loss: 7.3850 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 8/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1770 - categorical_accuracy: 0.9465\n",
      "Epoch 00008: saving model to model_init_2021-11-3015_56_01.229903/model-00008-0.17703-0.94652-2.01281-0.50000.h5\n",
      "11/11 [==============================] - 25s 2s/step - loss: 0.1770 - categorical_accuracy: 0.9465 - val_loss: 2.0128 - val_categorical_accuracy: 0.5000\n",
      "Epoch 9/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2597 - categorical_accuracy: 0.9251\n",
      "Epoch 00009: saving model to model_init_2021-11-3015_56_01.229903/model-00009-0.25971-0.92513-3.16243-0.37500.h5\n",
      "\n",
      "Epoch 00009: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.2597 - categorical_accuracy: 0.9251 - val_loss: 3.1624 - val_categorical_accuracy: 0.3750\n",
      "Epoch 10/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1868 - categorical_accuracy: 0.9465\n",
      "Epoch 00010: saving model to model_init_2021-11-3015_56_01.229903/model-00010-0.18677-0.94652-4.48438-0.12500.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.1868 - categorical_accuracy: 0.9465 - val_loss: 4.4844 - val_categorical_accuracy: 0.1250\n",
      "Epoch 11/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1623 - categorical_accuracy: 0.9679\n",
      "Epoch 00011: saving model to model_init_2021-11-3015_56_01.229903/model-00011-0.16225-0.96791-4.34130-0.12500.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.1623 - categorical_accuracy: 0.9679 - val_loss: 4.3413 - val_categorical_accuracy: 0.1250\n",
      "Epoch 12/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1406 - categorical_accuracy: 0.9679\n",
      "Epoch 00012: saving model to model_init_2021-11-3015_56_01.229903/model-00012-0.14064-0.96791-4.63444-0.25000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.1406 - categorical_accuracy: 0.9679 - val_loss: 4.6344 - val_categorical_accuracy: 0.2500\n",
      "Epoch 13/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1531 - categorical_accuracy: 0.9626\n",
      "Epoch 00013: saving model to model_init_2021-11-3015_56_01.229903/model-00013-0.15308-0.96257-2.68304-0.00000.h5\n",
      "\n",
      "Epoch 00013: ReduceLROnPlateau reducing learning rate to 8.000000525498762e-06.\n",
      "11/11 [==============================] - 25s 2s/step - loss: 0.1531 - categorical_accuracy: 0.9626 - val_loss: 2.6830 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 14/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1310 - categorical_accuracy: 0.9733\n",
      "Epoch 00014: saving model to model_init_2021-11-3015_56_01.229903/model-00014-0.13098-0.97326-2.86512-0.12500.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.1310 - categorical_accuracy: 0.9733 - val_loss: 2.8651 - val_categorical_accuracy: 0.1250\n",
      "Epoch 15/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1111 - categorical_accuracy: 0.9893\n",
      "Epoch 00015: saving model to model_init_2021-11-3015_56_01.229903/model-00015-0.11112-0.98930-2.77194-0.25000.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.1111 - categorical_accuracy: 0.9893 - val_loss: 2.7719 - val_categorical_accuracy: 0.2500\n",
      "Epoch 16/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1198 - categorical_accuracy: 0.9679\n",
      "Epoch 00016: saving model to model_init_2021-11-3015_56_01.229903/model-00016-0.11981-0.96791-4.25274-0.00000.h5\n",
      "11/11 [==============================] - 24s 2s/step - loss: 0.1198 - categorical_accuracy: 0.9679 - val_loss: 4.2527 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 17/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1208 - categorical_accuracy: 0.9626\n",
      "Epoch 00017: saving model to model_init_2021-11-3015_56_01.229903/model-00017-0.12085-0.96257-3.51093-0.00000.h5\n",
      "\n",
      "Epoch 00017: ReduceLROnPlateau reducing learning rate to 1.6000001778593287e-06.\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.1208 - categorical_accuracy: 0.9626 - val_loss: 3.5109 - val_categorical_accuracy: 0.0000e+00\n",
      "Epoch 18/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1397 - categorical_accuracy: 0.9840\n",
      "Epoch 00018: saving model to model_init_2021-11-3015_56_01.229903/model-00018-0.13970-0.98396-5.78617-0.12500.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.1397 - categorical_accuracy: 0.9840 - val_loss: 5.7862 - val_categorical_accuracy: 0.1250\n",
      "Epoch 19/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1221 - categorical_accuracy: 0.9786\n",
      "Epoch 00019: saving model to model_init_2021-11-3015_56_01.229903/model-00019-0.12207-0.97861-2.70047-0.25000.h5\n",
      "11/11 [==============================] - 25s 2s/step - loss: 0.1221 - categorical_accuracy: 0.9786 - val_loss: 2.7005 - val_categorical_accuracy: 0.2500\n",
      "Epoch 20/20\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1416 - categorical_accuracy: 0.9947\n",
      "Epoch 00020: saving model to model_init_2021-11-3015_56_01.229903/model-00020-0.14163-0.99465-3.95840-0.37500.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.1416 - categorical_accuracy: 0.9947 - val_loss: 3.9584 - val_categorical_accuracy: 0.3750\n"
     ]
    }
   ],
   "source": [
    "n_frames = 20\n",
    "num_epochs = 20\n",
    "batch_size = 64\n",
    "\n",
    "img_tensor = getImgTensor(n_frames)\n",
    "train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n",
    "\n",
    "if (num_train_sequences%batch_size) == 0:\n",
    "    steps_per_epoch = int(num_train_sequences/batch_size)\n",
    "else:\n",
    "    steps_per_epoch = (num_train_sequences//batch_size) + 1\n",
    "\n",
    "if (num_val_sequences%batch_size) == 0:\n",
    "    validation_steps = int(num_val_sequences/batch_size)\n",
    "else:\n",
    "    validation_steps = (num_val_sequences//batch_size) + 1\n",
    "    \n",
    "inputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n",
    "\n",
    "model5 = Sequential([\n",
    "    Conv3D(16, make3dFilter(2), padding='same', activation='relu', input_shape=inputShape),\n",
    "    BatchNormalization(),\n",
    "    MaxPooling3D(make3dFilter(2)),\n",
    "\n",
    "    Conv3D(32, make3dFilter(2), padding='same', activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    MaxPooling3D(pool_size=(2)),\n",
    "\n",
    "    Conv3D(64, make3dFilter(2), padding='same', activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    MaxPooling3D(pool_size=(2)),\n",
    "\n",
    "    Conv3D(128, make3dFilter(2), padding='same', activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    MaxPooling3D(pool_size=(2)),\n",
    "\n",
    "    Flatten(),\n",
    "    Dense(256, activation='relu'),\n",
    "    # BatchNormalization(),\n",
    "    # Dropout(0.3),\n",
    "\n",
    "    Dense(128, activation='relu'),\n",
    "    # BatchNormalization(),\n",
    "    # Dropout(0.2),\n",
    "\n",
    "    Dense(5, activation='softmax')\n",
    "], name=\"conv_3d5\")\n",
    "model5.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
    "print(model5.summary())\n",
    "\n",
    "model5_history = model5.fit(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n",
    "            callbacks=callbacks_list, validation_data=val_generator, \n",
    "            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max. Training Accuracy 0.9946523904800415\n",
      "Max. Validaiton Accuracy 0.5\n"
     ]
    }
   ],
   "source": [
    "plotModelHistory(model5_history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 6: Switching Model Architecture to Conv2D+LSTM with Batch Size 32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"conv_2d_lstm\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "time_distributed (TimeDistri (None, 20, 100, 100, 16)  448       \n",
      "_________________________________________________________________\n",
      "time_distributed_1 (TimeDist (None, 20, 100, 100, 16)  64        \n",
      "_________________________________________________________________\n",
      "time_distributed_2 (TimeDist (None, 20, 50, 50, 16)    0         \n",
      "_________________________________________________________________\n",
      "time_distributed_3 (TimeDist (None, 20, 50, 50, 32)    4640      \n",
      "_________________________________________________________________\n",
      "time_distributed_4 (TimeDist (None, 20, 50, 50, 32)    128       \n",
      "_________________________________________________________________\n",
      "time_distributed_5 (TimeDist (None, 20, 25, 25, 32)    0         \n",
      "_________________________________________________________________\n",
      "time_distributed_6 (TimeDist (None, 20, 25, 25, 64)    18496     \n",
      "_________________________________________________________________\n",
      "time_distributed_7 (TimeDist (None, 20, 25, 25, 64)    256       \n",
      "_________________________________________________________________\n",
      "time_distributed_8 (TimeDist (None, 20, 12, 12, 64)    0         \n",
      "_________________________________________________________________\n",
      "time_distributed_9 (TimeDist (None, 20, 12, 12, 128)   73856     \n",
      "_________________________________________________________________\n",
      "time_distributed_10 (TimeDis (None, 20, 12, 12, 128)   512       \n",
      "_________________________________________________________________\n",
      "time_distributed_11 (TimeDis (None, 20, 6, 6, 128)     0         \n",
      "_________________________________________________________________\n",
      "time_distributed_12 (TimeDis (None, 20, 6, 6, 256)     295168    \n",
      "_________________________________________________________________\n",
      "time_distributed_13 (TimeDis (None, 20, 6, 6, 256)     1024      \n",
      "_________________________________________________________________\n",
      "time_distributed_14 (TimeDis (None, 20, 3, 3, 256)     0         \n",
      "_________________________________________________________________\n",
      "time_distributed_15 (TimeDis (None, 20, 2304)          0         \n",
      "_________________________________________________________________\n",
      "lstm (LSTM)                  (None, 256)               2622464   \n",
      "_________________________________________________________________\n",
      "dropout_10 (Dropout)         (None, 256)               0         \n",
      "_________________________________________________________________\n",
      "dense_18 (Dense)             (None, 256)               65792     \n",
      "_________________________________________________________________\n",
      "dropout_11 (Dropout)         (None, 256)               0         \n",
      "_________________________________________________________________\n",
      "dense_19 (Dense)             (None, 5)                 1285      \n",
      "=================================================================\n",
      "Total params: 3,084,133\n",
      "Trainable params: 3,083,141\n",
      "Non-trainable params: 992\n",
      "_________________________________________________________________\n",
      "None\n",
      "Source path =  /home/datasets/Project_data/train ; batch size = 32\n",
      "Epoch 1/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 1.1918 - categorical_accuracy: 0.5098Source path =  /home/datasets/Project_data/val ; batch size = 32\n",
      "\n",
      "Epoch 00001: saving model to model_init_2021-11-3015_56_01.229903/model-00001-1.19176-0.50980-1.82330-0.21000.h5\n",
      "21/21 [==============================] - 104s 5s/step - loss: 1.1918 - categorical_accuracy: 0.5098 - val_loss: 1.8233 - val_categorical_accuracy: 0.2100\n",
      "Epoch 2/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.9050 - categorical_accuracy: 0.6625\n",
      "Epoch 00002: saving model to model_init_2021-11-3015_56_01.229903/model-00002-0.90495-0.66253-1.43359-0.43750.h5\n",
      "21/21 [==============================] - 66s 3s/step - loss: 0.9050 - categorical_accuracy: 0.6625 - val_loss: 1.4336 - val_categorical_accuracy: 0.4375\n",
      "Epoch 3/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.7655 - categorical_accuracy: 0.6792\n",
      "Epoch 00003: saving model to model_init_2021-11-3015_56_01.229903/model-00003-0.76551-0.67916-2.58267-0.18750.h5\n",
      "21/21 [==============================] - 60s 3s/step - loss: 0.7655 - categorical_accuracy: 0.6792 - val_loss: 2.5827 - val_categorical_accuracy: 0.1875\n",
      "Epoch 4/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.5948 - categorical_accuracy: 0.7845\n",
      "Epoch 00004: saving model to model_init_2021-11-3015_56_01.229903/model-00004-0.59484-0.78446-2.76547-0.18750.h5\n",
      "21/21 [==============================] - 55s 3s/step - loss: 0.5948 - categorical_accuracy: 0.7845 - val_loss: 2.7655 - val_categorical_accuracy: 0.1875\n",
      "Epoch 5/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.4924 - categorical_accuracy: 0.8235\n",
      "Epoch 00005: saving model to model_init_2021-11-3015_56_01.229903/model-00005-0.49241-0.82353-1.80110-0.31250.h5\n",
      "21/21 [==============================] - 49s 2s/step - loss: 0.4924 - categorical_accuracy: 0.8235 - val_loss: 1.8011 - val_categorical_accuracy: 0.3125\n",
      "Epoch 6/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.5394 - categorical_accuracy: 0.7927\n",
      "Epoch 00006: saving model to model_init_2021-11-3015_56_01.229903/model-00006-0.53943-0.79272-2.94920-0.18750.h5\n",
      "\n",
      "Epoch 00006: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n",
      "21/21 [==============================] - 53s 3s/step - loss: 0.5394 - categorical_accuracy: 0.7927 - val_loss: 2.9492 - val_categorical_accuracy: 0.1875\n",
      "Epoch 7/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.4606 - categorical_accuracy: 0.8515\n",
      "Epoch 00007: saving model to model_init_2021-11-3015_56_01.229903/model-00007-0.46064-0.85154-2.38426-0.06250.h5\n",
      "21/21 [==============================] - 50s 2s/step - loss: 0.4606 - categorical_accuracy: 0.8515 - val_loss: 2.3843 - val_categorical_accuracy: 0.0625\n",
      "Epoch 8/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.3383 - categorical_accuracy: 0.8711\n",
      "Epoch 00008: saving model to model_init_2021-11-3015_56_01.229903/model-00008-0.33834-0.87115-2.60056-0.25000.h5\n",
      "21/21 [==============================] - 52s 2s/step - loss: 0.3383 - categorical_accuracy: 0.8711 - val_loss: 2.6006 - val_categorical_accuracy: 0.2500\n",
      "Epoch 9/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.2253 - categorical_accuracy: 0.9356\n",
      "Epoch 00009: saving model to model_init_2021-11-3015_56_01.229903/model-00009-0.22528-0.93557-2.28792-0.12500.h5\n",
      "21/21 [==============================] - 49s 2s/step - loss: 0.2253 - categorical_accuracy: 0.9356 - val_loss: 2.2879 - val_categorical_accuracy: 0.1250\n",
      "Epoch 10/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.2004 - categorical_accuracy: 0.9412\n",
      "Epoch 00010: saving model to model_init_2021-11-3015_56_01.229903/model-00010-0.20036-0.94118-2.20346-0.37500.h5\n",
      "\n",
      "Epoch 00010: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n",
      "21/21 [==============================] - 52s 2s/step - loss: 0.2004 - categorical_accuracy: 0.9412 - val_loss: 2.2035 - val_categorical_accuracy: 0.3750\n",
      "Epoch 11/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1721 - categorical_accuracy: 0.9524\n",
      "Epoch 00011: saving model to model_init_2021-11-3015_56_01.229903/model-00011-0.17206-0.95238-2.39479-0.25000.h5\n",
      "21/21 [==============================] - 49s 2s/step - loss: 0.1721 - categorical_accuracy: 0.9524 - val_loss: 2.3948 - val_categorical_accuracy: 0.2500\n",
      "Epoch 12/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1629 - categorical_accuracy: 0.9608\n",
      "Epoch 00012: saving model to model_init_2021-11-3015_56_01.229903/model-00012-0.16287-0.96078-2.44933-0.25000.h5\n",
      "21/21 [==============================] - 52s 2s/step - loss: 0.1629 - categorical_accuracy: 0.9608 - val_loss: 2.4493 - val_categorical_accuracy: 0.2500\n",
      "Epoch 13/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1285 - categorical_accuracy: 0.9692\n",
      "Epoch 00013: saving model to model_init_2021-11-3015_56_01.229903/model-00013-0.12846-0.96919-2.24632-0.25000.h5\n",
      "21/21 [==============================] - 51s 2s/step - loss: 0.1285 - categorical_accuracy: 0.9692 - val_loss: 2.2463 - val_categorical_accuracy: 0.2500\n",
      "Epoch 14/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1402 - categorical_accuracy: 0.9608\n",
      "Epoch 00014: saving model to model_init_2021-11-3015_56_01.229903/model-00014-0.14018-0.96078-2.20123-0.25000.h5\n",
      "\n",
      "Epoch 00014: ReduceLROnPlateau reducing learning rate to 8.000000525498762e-06.\n",
      "21/21 [==============================] - 49s 2s/step - loss: 0.1402 - categorical_accuracy: 0.9608 - val_loss: 2.2012 - val_categorical_accuracy: 0.2500\n",
      "Epoch 15/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1250 - categorical_accuracy: 0.9692\n",
      "Epoch 00015: saving model to model_init_2021-11-3015_56_01.229903/model-00015-0.12500-0.96919-2.17165-0.31250.h5\n",
      "21/21 [==============================] - 51s 2s/step - loss: 0.1250 - categorical_accuracy: 0.9692 - val_loss: 2.1716 - val_categorical_accuracy: 0.3125\n",
      "Epoch 16/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1139 - categorical_accuracy: 0.9748\n",
      "Epoch 00016: saving model to model_init_2021-11-3015_56_01.229903/model-00016-0.11389-0.97479-2.14259-0.18750.h5\n",
      "21/21 [==============================] - 53s 3s/step - loss: 0.1139 - categorical_accuracy: 0.9748 - val_loss: 2.1426 - val_categorical_accuracy: 0.1875\n",
      "Epoch 17/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1248 - categorical_accuracy: 0.9720\n",
      "Epoch 00017: saving model to model_init_2021-11-3015_56_01.229903/model-00017-0.12484-0.97199-1.25603-0.56250.h5\n",
      "21/21 [==============================] - 54s 3s/step - loss: 0.1248 - categorical_accuracy: 0.9720 - val_loss: 1.2560 - val_categorical_accuracy: 0.5625\n",
      "Epoch 18/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1292 - categorical_accuracy: 0.9580\n",
      "Epoch 00018: saving model to model_init_2021-11-3015_56_01.229903/model-00018-0.12923-0.95798-1.98152-0.37500.h5\n",
      "21/21 [==============================] - 52s 2s/step - loss: 0.1292 - categorical_accuracy: 0.9580 - val_loss: 1.9815 - val_categorical_accuracy: 0.3750\n",
      "Epoch 19/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1053 - categorical_accuracy: 0.9832\n",
      "Epoch 00019: saving model to model_init_2021-11-3015_56_01.229903/model-00019-0.10528-0.98319-1.86301-0.37500.h5\n",
      "21/21 [==============================] - 53s 3s/step - loss: 0.1053 - categorical_accuracy: 0.9832 - val_loss: 1.8630 - val_categorical_accuracy: 0.3750\n",
      "Epoch 20/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1140 - categorical_accuracy: 0.9664\n",
      "Epoch 00020: saving model to model_init_2021-11-3015_56_01.229903/model-00020-0.11402-0.96639-2.04568-0.50000.h5\n",
      "21/21 [==============================] - 50s 2s/step - loss: 0.1140 - categorical_accuracy: 0.9664 - val_loss: 2.0457 - val_categorical_accuracy: 0.5000\n",
      "Epoch 21/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1253 - categorical_accuracy: 0.9720\n",
      "Epoch 00021: saving model to model_init_2021-11-3015_56_01.229903/model-00021-0.12526-0.97199-2.13481-0.25000.h5\n",
      "\n",
      "Epoch 00021: ReduceLROnPlateau reducing learning rate to 1.6000001778593287e-06.\n",
      "21/21 [==============================] - 54s 3s/step - loss: 0.1253 - categorical_accuracy: 0.9720 - val_loss: 2.1348 - val_categorical_accuracy: 0.2500\n",
      "Epoch 22/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1118 - categorical_accuracy: 0.9720\n",
      "Epoch 00022: saving model to model_init_2021-11-3015_56_01.229903/model-00022-0.11180-0.97199-1.13356-0.50000.h5\n",
      "21/21 [==============================] - 52s 2s/step - loss: 0.1118 - categorical_accuracy: 0.9720 - val_loss: 1.1336 - val_categorical_accuracy: 0.5000\n",
      "Epoch 23/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1268 - categorical_accuracy: 0.9720\n",
      "Epoch 00023: saving model to model_init_2021-11-3015_56_01.229903/model-00023-0.12679-0.97199-1.26913-0.31250.h5\n",
      "21/21 [==============================] - 53s 3s/step - loss: 0.1268 - categorical_accuracy: 0.9720 - val_loss: 1.2691 - val_categorical_accuracy: 0.3125\n",
      "Epoch 24/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1146 - categorical_accuracy: 0.9748\n",
      "Epoch 00024: saving model to model_init_2021-11-3015_56_01.229903/model-00024-0.11459-0.97479-0.97296-0.68750.h5\n",
      "21/21 [==============================] - 53s 3s/step - loss: 0.1146 - categorical_accuracy: 0.9748 - val_loss: 0.9730 - val_categorical_accuracy: 0.6875\n",
      "Epoch 25/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1198 - categorical_accuracy: 0.9720\n",
      "Epoch 00025: saving model to model_init_2021-11-3015_56_01.229903/model-00025-0.11978-0.97199-1.25799-0.56250.h5\n",
      "21/21 [==============================] - 51s 2s/step - loss: 0.1198 - categorical_accuracy: 0.9720 - val_loss: 1.2580 - val_categorical_accuracy: 0.5625\n",
      "Epoch 26/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.0950 - categorical_accuracy: 0.9832\n",
      "Epoch 00026: saving model to model_init_2021-11-3015_56_01.229903/model-00026-0.09504-0.98319-1.12597-0.56250.h5\n",
      "21/21 [==============================] - 55s 3s/step - loss: 0.0950 - categorical_accuracy: 0.9832 - val_loss: 1.1260 - val_categorical_accuracy: 0.5625\n",
      "Epoch 27/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1111 - categorical_accuracy: 0.9776\n",
      "Epoch 00027: saving model to model_init_2021-11-3015_56_01.229903/model-00027-0.11115-0.97759-0.70345-0.81250.h5\n",
      "21/21 [==============================] - 50s 2s/step - loss: 0.1111 - categorical_accuracy: 0.9776 - val_loss: 0.7035 - val_categorical_accuracy: 0.8125\n",
      "Epoch 28/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1065 - categorical_accuracy: 0.9720\n",
      "Epoch 00028: saving model to model_init_2021-11-3015_56_01.229903/model-00028-0.10650-0.97199-0.59541-0.75000.h5\n",
      "21/21 [==============================] - 54s 3s/step - loss: 0.1065 - categorical_accuracy: 0.9720 - val_loss: 0.5954 - val_categorical_accuracy: 0.7500\n",
      "Epoch 29/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.1394 - categorical_accuracy: 0.9636\n",
      "Epoch 00029: saving model to model_init_2021-11-3015_56_01.229903/model-00029-0.13943-0.96359-0.28338-0.81250.h5\n",
      "21/21 [==============================] - 53s 3s/step - loss: 0.1394 - categorical_accuracy: 0.9636 - val_loss: 0.2834 - val_categorical_accuracy: 0.8125\n",
      "Epoch 30/30\n",
      "21/21 [==============================] - ETA: 0s - loss: 0.0954 - categorical_accuracy: 0.9888\n",
      "Epoch 00030: saving model to model_init_2021-11-3015_56_01.229903/model-00030-0.09538-0.98880-0.31333-0.81250.h5\n",
      "21/21 [==============================] - 53s 3s/step - loss: 0.0954 - categorical_accuracy: 0.9888 - val_loss: 0.3133 - val_categorical_accuracy: 0.8125\n"
     ]
    }
   ],
   "source": [
    "n_frames = 20\n",
    "num_epochs = 30\n",
    "batch_size = 32\n",
    "\n",
    "img_tensor = getImgTensor(n_frames)\n",
    "train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n",
    "\n",
    "if (num_train_sequences%batch_size) == 0:\n",
    "    steps_per_epoch = int(num_train_sequences/batch_size)\n",
    "else:\n",
    "    steps_per_epoch = (num_train_sequences//batch_size) + 1\n",
    "\n",
    "if (num_val_sequences%batch_size) == 0:\n",
    "    validation_steps = int(num_val_sequences/batch_size)\n",
    "else:\n",
    "    validation_steps = (num_val_sequences//batch_size) + 1\n",
    "    \n",
    "inputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n",
    "\n",
    "model6 = Sequential([\n",
    "    TimeDistributed(Conv2D(16, make2dFilter(3), padding='same', activation='relu'), input_shape=inputShape),\n",
    "    TimeDistributed(BatchNormalization()),\n",
    "    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n",
    "\n",
    "    TimeDistributed(Conv2D(32, make2dFilter(3), padding='same', activation='relu')),\n",
    "    TimeDistributed(BatchNormalization()),\n",
    "    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n",
    "\n",
    "    TimeDistributed(Conv2D(64, make2dFilter(3), padding='same', activation='relu')),\n",
    "    TimeDistributed(BatchNormalization()),\n",
    "    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n",
    "\n",
    "    TimeDistributed(Conv2D(128, make2dFilter(3), padding='same', activation='relu')),\n",
    "    TimeDistributed(BatchNormalization()),\n",
    "    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n",
    "\n",
    "    TimeDistributed(Conv2D(256, make2dFilter(3), padding='same', activation='relu')),\n",
    "    TimeDistributed(BatchNormalization()),\n",
    "    TimeDistributed(MaxPooling2D(make2dFilter(2))),\n",
    "\n",
    "    TimeDistributed(Flatten()),\n",
    "    LSTM(256),\n",
    "    Dropout(0.2),\n",
    "\n",
    "    Dense(256, activation='relu'),\n",
    "    Dropout(0.2),\n",
    "\n",
    "    Dense(5, activation='softmax')\n",
    "], name=\"conv_2d_lstm\")\n",
    "model6.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
    "print(model6.summary())\n",
    "\n",
    "model6_history = model6.fit(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n",
    "            callbacks=callbacks_list, validation_data=val_generator, \n",
    "            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max. Training Accuracy 0.9887955188751221\n",
      "Max. Validaiton Accuracy 0.8125\n"
     ]
    }
   ],
   "source": [
    "plotModelHistory(model6_history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 7: Transfer Learning (MobileNet) with LSTM and more Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.applications import mobilenet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:`input_shape` is undefined or non-square, or `rows` is not in [128, 160, 192, 224]. Weights for input shape (224, 224) will be loaded as the default.\n",
      "Model: \"mobilenet_lstm\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "time_distributed_16 (TimeDis (None, 20, 3, 3, 1024)    3228864   \n",
      "_________________________________________________________________\n",
      "time_distributed_17 (TimeDis (None, 20, 3, 3, 1024)    4096      \n",
      "_________________________________________________________________\n",
      "time_distributed_18 (TimeDis (None, 20, 1, 1, 1024)    0         \n",
      "_________________________________________________________________\n",
      "time_distributed_19 (TimeDis (None, 20, 1024)          0         \n",
      "_________________________________________________________________\n",
      "lstm_1 (LSTM)                (None, 256)               1311744   \n",
      "_________________________________________________________________\n",
      "dropout_12 (Dropout)         (None, 256)               0         \n",
      "_________________________________________________________________\n",
      "dense_20 (Dense)             (None, 256)               65792     \n",
      "_________________________________________________________________\n",
      "dropout_13 (Dropout)         (None, 256)               0         \n",
      "_________________________________________________________________\n",
      "dense_21 (Dense)             (None, 5)                 1285      \n",
      "=================================================================\n",
      "Total params: 4,611,781\n",
      "Trainable params: 1,380,869\n",
      "Non-trainable params: 3,230,912\n",
      "_________________________________________________________________\n",
      "None\n",
      "Source path =  /home/datasets/Project_data/train ; batch size = 64\n",
      "Epoch 1/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 1.3180 - categorical_accuracy: 0.4676Source path =  /home/datasets/Project_data/val ; batch size = 64\n",
      "\n",
      "Epoch 00001: saving model to model_init_2021-11-3015_56_01.229903/model-00001-1.31803-0.46757-0.91954-0.63000.h5\n",
      "11/11 [==============================] - 109s 10s/step - loss: 1.3180 - categorical_accuracy: 0.4676 - val_loss: 0.9195 - val_categorical_accuracy: 0.6300\n",
      "Epoch 2/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.5671 - categorical_accuracy: 0.8300\n",
      "Epoch 00002: saving model to model_init_2021-11-3015_56_01.229903/model-00002-0.56713-0.83004-0.85458-0.59375.h5\n",
      "11/11 [==============================] - 48s 4s/step - loss: 0.5671 - categorical_accuracy: 0.8300 - val_loss: 0.8546 - val_categorical_accuracy: 0.5938\n",
      "Epoch 3/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.4619 - categorical_accuracy: 0.8340\n",
      "Epoch 00003: saving model to model_init_2021-11-3015_56_01.229903/model-00003-0.46193-0.83399-0.68370-0.76786.h5\n",
      "11/11 [==============================] - 47s 4s/step - loss: 0.4619 - categorical_accuracy: 0.8340 - val_loss: 0.6837 - val_categorical_accuracy: 0.7679\n",
      "Epoch 4/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.2921 - categorical_accuracy: 0.9056\n",
      "Epoch 00004: saving model to model_init_2021-11-3015_56_01.229903/model-00004-0.29215-0.90558-1.07988-0.62500.h5\n",
      "11/11 [==============================] - 38s 3s/step - loss: 0.2921 - categorical_accuracy: 0.9056 - val_loss: 1.0799 - val_categorical_accuracy: 0.6250\n",
      "Epoch 5/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1905 - categorical_accuracy: 0.9330\n",
      "Epoch 00005: saving model to model_init_2021-11-3015_56_01.229903/model-00005-0.19047-0.93301-1.19676-0.71875.h5\n",
      "11/11 [==============================] - 35s 3s/step - loss: 0.1905 - categorical_accuracy: 0.9330 - val_loss: 1.1968 - val_categorical_accuracy: 0.7188\n",
      "Epoch 6/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1531 - categorical_accuracy: 0.9282\n",
      "Epoch 00006: saving model to model_init_2021-11-3015_56_01.229903/model-00006-0.15307-0.92823-1.18608-0.62500.h5\n",
      "11/11 [==============================] - 29s 3s/step - loss: 0.1531 - categorical_accuracy: 0.9282 - val_loss: 1.1861 - val_categorical_accuracy: 0.6250\n",
      "Epoch 7/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.1705 - categorical_accuracy: 0.9409\n",
      "Epoch 00007: saving model to model_init_2021-11-3015_56_01.229903/model-00007-0.17045-0.94089-0.19429-0.87500.h5\n",
      "11/11 [==============================] - 28s 3s/step - loss: 0.1705 - categorical_accuracy: 0.9409 - val_loss: 0.1943 - val_categorical_accuracy: 0.8750\n",
      "Epoch 8/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0675 - categorical_accuracy: 0.9840\n",
      "Epoch 00008: saving model to model_init_2021-11-3015_56_01.229903/model-00008-0.06752-0.98396-1.04478-0.75000.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.0675 - categorical_accuracy: 0.9840 - val_loss: 1.0448 - val_categorical_accuracy: 0.7500\n",
      "Epoch 9/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0468 - categorical_accuracy: 0.9893\n",
      "Epoch 00009: saving model to model_init_2021-11-3015_56_01.229903/model-00009-0.04677-0.98930-0.74522-0.75000.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.0468 - categorical_accuracy: 0.9893 - val_loss: 0.7452 - val_categorical_accuracy: 0.7500\n",
      "Epoch 10/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0860 - categorical_accuracy: 0.9572\n",
      "Epoch 00010: saving model to model_init_2021-11-3015_56_01.229903/model-00010-0.08596-0.95722-0.79343-0.75000.h5\n",
      "11/11 [==============================] - 25s 2s/step - loss: 0.0860 - categorical_accuracy: 0.9572 - val_loss: 0.7934 - val_categorical_accuracy: 0.7500\n",
      "Epoch 11/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0657 - categorical_accuracy: 0.9786\n",
      "Epoch 00011: saving model to model_init_2021-11-3015_56_01.229903/model-00011-0.06569-0.97861-0.81383-0.75000.h5\n",
      "\n",
      "Epoch 00011: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.0657 - categorical_accuracy: 0.9786 - val_loss: 0.8138 - val_categorical_accuracy: 0.7500\n",
      "Epoch 12/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0342 - categorical_accuracy: 0.9947\n",
      "Epoch 00012: saving model to model_init_2021-11-3015_56_01.229903/model-00012-0.03416-0.99465-0.81614-0.62500.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.0342 - categorical_accuracy: 0.9947 - val_loss: 0.8161 - val_categorical_accuracy: 0.6250\n",
      "Epoch 13/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0186 - categorical_accuracy: 1.0000\n",
      "Epoch 00013: saving model to model_init_2021-11-3015_56_01.229903/model-00013-0.01859-1.00000-1.32723-0.75000.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.0186 - categorical_accuracy: 1.0000 - val_loss: 1.3272 - val_categorical_accuracy: 0.7500\n",
      "Epoch 14/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0290 - categorical_accuracy: 0.9893\n",
      "Epoch 00014: saving model to model_init_2021-11-3015_56_01.229903/model-00014-0.02903-0.98930-0.32032-0.87500.h5\n",
      "11/11 [==============================] - 28s 3s/step - loss: 0.0290 - categorical_accuracy: 0.9893 - val_loss: 0.3203 - val_categorical_accuracy: 0.8750\n",
      "Epoch 15/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0149 - categorical_accuracy: 1.0000\n",
      "Epoch 00015: saving model to model_init_2021-11-3015_56_01.229903/model-00015-0.01489-1.00000-0.33936-0.75000.h5\n",
      "\n",
      "Epoch 00015: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.0149 - categorical_accuracy: 1.0000 - val_loss: 0.3394 - val_categorical_accuracy: 0.7500\n",
      "Epoch 16/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0109 - categorical_accuracy: 1.0000\n",
      "Epoch 00016: saving model to model_init_2021-11-3015_56_01.229903/model-00016-0.01088-1.00000-0.67579-0.75000.h5\n",
      "11/11 [==============================] - 28s 3s/step - loss: 0.0109 - categorical_accuracy: 1.0000 - val_loss: 0.6758 - val_categorical_accuracy: 0.7500\n",
      "Epoch 17/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0232 - categorical_accuracy: 0.9947\n",
      "Epoch 00017: saving model to model_init_2021-11-3015_56_01.229903/model-00017-0.02323-0.99465-0.63150-0.75000.h5\n",
      "11/11 [==============================] - 28s 3s/step - loss: 0.0232 - categorical_accuracy: 0.9947 - val_loss: 0.6315 - val_categorical_accuracy: 0.7500\n",
      "Epoch 18/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0141 - categorical_accuracy: 1.0000\n",
      "Epoch 00018: saving model to model_init_2021-11-3015_56_01.229903/model-00018-0.01409-1.00000-0.92063-0.75000.h5\n",
      "11/11 [==============================] - 28s 3s/step - loss: 0.0141 - categorical_accuracy: 1.0000 - val_loss: 0.9206 - val_categorical_accuracy: 0.7500\n",
      "Epoch 19/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0113 - categorical_accuracy: 1.0000\n",
      "Epoch 00019: saving model to model_init_2021-11-3015_56_01.229903/model-00019-0.01134-1.00000-0.69020-0.75000.h5\n",
      "\n",
      "Epoch 00019: ReduceLROnPlateau reducing learning rate to 8.000000525498762e-06.\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.0113 - categorical_accuracy: 1.0000 - val_loss: 0.6902 - val_categorical_accuracy: 0.7500\n",
      "Epoch 20/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0106 - categorical_accuracy: 1.0000\n",
      "Epoch 00020: saving model to model_init_2021-11-3015_56_01.229903/model-00020-0.01065-1.00000-0.59015-0.75000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.0106 - categorical_accuracy: 1.0000 - val_loss: 0.5901 - val_categorical_accuracy: 0.7500\n",
      "Epoch 21/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0212 - categorical_accuracy: 0.9947\n",
      "Epoch 00021: saving model to model_init_2021-11-3015_56_01.229903/model-00021-0.02117-0.99465-0.16855-1.00000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.0212 - categorical_accuracy: 0.9947 - val_loss: 0.1685 - val_categorical_accuracy: 1.0000\n",
      "Epoch 22/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0104 - categorical_accuracy: 1.0000\n",
      "Epoch 00022: saving model to model_init_2021-11-3015_56_01.229903/model-00022-0.01038-1.00000-0.47028-0.87500.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.0104 - categorical_accuracy: 1.0000 - val_loss: 0.4703 - val_categorical_accuracy: 0.8750\n",
      "Epoch 23/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0081 - categorical_accuracy: 1.0000\n",
      "Epoch 00023: saving model to model_init_2021-11-3015_56_01.229903/model-00023-0.00810-1.00000-0.92126-0.62500.h5\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.0081 - categorical_accuracy: 1.0000 - val_loss: 0.9213 - val_categorical_accuracy: 0.6250\n",
      "Epoch 24/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0116 - categorical_accuracy: 1.0000\n",
      "Epoch 00024: saving model to model_init_2021-11-3015_56_01.229903/model-00024-0.01160-1.00000-1.03418-0.62500.h5\n",
      "11/11 [==============================] - 28s 3s/step - loss: 0.0116 - categorical_accuracy: 1.0000 - val_loss: 1.0342 - val_categorical_accuracy: 0.6250\n",
      "Epoch 25/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0181 - categorical_accuracy: 1.0000\n",
      "Epoch 00025: saving model to model_init_2021-11-3015_56_01.229903/model-00025-0.01813-1.00000-0.42657-0.87500.h5\n",
      "\n",
      "Epoch 00025: ReduceLROnPlateau reducing learning rate to 1.6000001778593287e-06.\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.0181 - categorical_accuracy: 1.0000 - val_loss: 0.4266 - val_categorical_accuracy: 0.8750\n",
      "Epoch 26/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0084 - categorical_accuracy: 1.0000\n",
      "Epoch 00026: saving model to model_init_2021-11-3015_56_01.229903/model-00026-0.00840-1.00000-0.43691-0.87500.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.0084 - categorical_accuracy: 1.0000 - val_loss: 0.4369 - val_categorical_accuracy: 0.8750\n",
      "Epoch 27/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0085 - categorical_accuracy: 1.0000\n",
      "Epoch 00027: saving model to model_init_2021-11-3015_56_01.229903/model-00027-0.00851-1.00000-0.55735-0.75000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.0085 - categorical_accuracy: 1.0000 - val_loss: 0.5573 - val_categorical_accuracy: 0.7500\n",
      "Epoch 28/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0146 - categorical_accuracy: 1.0000\n",
      "Epoch 00028: saving model to model_init_2021-11-3015_56_01.229903/model-00028-0.01457-1.00000-0.76257-0.75000.h5\n",
      "11/11 [==============================] - 28s 3s/step - loss: 0.0146 - categorical_accuracy: 1.0000 - val_loss: 0.7626 - val_categorical_accuracy: 0.7500\n",
      "Epoch 29/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0130 - categorical_accuracy: 1.0000\n",
      "Epoch 00029: saving model to model_init_2021-11-3015_56_01.229903/model-00029-0.01302-1.00000-0.74344-0.87500.h5\n",
      "\n",
      "Epoch 00029: ReduceLROnPlateau reducing learning rate to 3.200000264769187e-07.\n",
      "11/11 [==============================] - 27s 2s/step - loss: 0.0130 - categorical_accuracy: 1.0000 - val_loss: 0.7434 - val_categorical_accuracy: 0.8750\n",
      "Epoch 30/30\n",
      "11/11 [==============================] - ETA: 0s - loss: 0.0103 - categorical_accuracy: 1.0000\n",
      "Epoch 00030: saving model to model_init_2021-11-3015_56_01.229903/model-00030-0.01031-1.00000-0.56514-0.75000.h5\n",
      "11/11 [==============================] - 26s 2s/step - loss: 0.0103 - categorical_accuracy: 1.0000 - val_loss: 0.5651 - val_categorical_accuracy: 0.7500\n"
     ]
    }
   ],
   "source": [
    "mobilenet = mobilenet.MobileNet(weights='imagenet', include_top=False)\n",
    "\n",
    "n_frames = 20\n",
    "num_epochs = 30\n",
    "batch_size = 64\n",
    "\n",
    "img_tensor = getImgTensor(n_frames)\n",
    "train_generator = generator(train_path, train_doc, batch_size, img_tensor)\n",
    "val_generator = generator(val_path, val_doc, batch_size, img_tensor)\n",
    "\n",
    "if (num_train_sequences%batch_size) == 0:\n",
    "    steps_per_epoch = int(num_train_sequences/batch_size)\n",
    "else:\n",
    "    steps_per_epoch = (num_train_sequences//batch_size) + 1\n",
    "\n",
    "if (num_val_sequences%batch_size) == 0:\n",
    "    validation_steps = int(num_val_sequences/batch_size)\n",
    "else:\n",
    "    validation_steps = (num_val_sequences//batch_size) + 1\n",
    "    \n",
    "inputShape = (len(img_tensor[0]), img_tensor[1], img_tensor[2], img_tensor[3])\n",
    "\n",
    "model7 = Sequential([\n",
    "    TimeDistributed(mobilenet, input_shape=inputShape)\n",
    "], name=\"mobilenet_lstm\")\n",
    "\n",
    "for layer in model7.layers:\n",
    "    layer.trainable = False\n",
    "\n",
    "model7.add(TimeDistributed(BatchNormalization()))\n",
    "model7.add(TimeDistributed(MaxPooling2D(make2dFilter(2))))\n",
    "model7.add(TimeDistributed(Flatten()))\n",
    "\n",
    "model7.add(LSTM(256))\n",
    "model7.add(Dropout(0.4))\n",
    "\n",
    "model7.add(Dense(256,activation='relu'))\n",
    "model7.add(Dropout(0.4))\n",
    "\n",
    "model7.add(Dense(5, activation='softmax'))\n",
    "\n",
    "model7.compile(optimizer=tf.keras.optimizers.Adam(), loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n",
    "print(model7.summary())\n",
    "\n",
    "model7_history = model7.fit(train_generator, steps_per_epoch=steps_per_epoch, epochs=num_epochs, verbose=1, \n",
    "            callbacks=callbacks_list, validation_data=val_generator, \n",
    "            validation_steps=validation_steps, class_weight=None, workers=1, initial_epoch=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max. Training Accuracy 1.0\n",
      "Max. Validaiton Accuracy 1.0\n"
     ]
    }
   ],
   "source": [
    "plotModelHistory(model7_history)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Please refer to the attached h5 file which has more improved validation accuracy for transfer learning as we had trouble with Jarvis for execution of last model again with added drop out(0.4)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FINAL output \n",
    "\n",
    "##Training Accuracy 0.9947\n",
    "\n",
    "##Validation Accuracy 0.8750"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "RNN.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
